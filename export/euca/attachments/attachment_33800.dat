
import java.io.InputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.Security;
import java.security.Signature;
import java.security.SignatureException;
import java.security.NoSuchAlgorithmException;;
import java.security.InvalidKeyException;;
import java.security.NoSuchProviderException;;
import java.security.spec.InvalidKeySpecException;;
import java.security.spec.RSAPublicKeySpec;
import java.util.Scanner;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class jwttest {
    public static String readUrl(String url) throws IOException, MalformedURLException {
        URL location = new URL( url );
        InputStream istr = (InputStream)location.openConnection().getContent();
        Scanner s = new Scanner(istr).useDelimiter("\\A");
        return ( s.hasNext() ? s.next() : "" );
    }

    public static void main(String [] args) throws IOException, MalformedURLException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchProviderException, InvalidKeyException, SignatureException {
        Security.addProvider(new BouncyCastleProvider());
        String jwt = "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJub25jZSI6bnVsbCwiYXRfaGFzaCI6IkNLUy1YYWtKV0FnVzdnSTFna2hSLWw3R1lXQkFHQkppSkg0MmxFNVZNaUU9IiwiYXVkIjoiNjU5MDY3ZWMtOTY5OC00NGE4LTg4ZWEtZGIzMWUwNzE0NDdhIiwic3ViIjoiNmYzYTE3ZDQtNTM4ZS00NDMxLTg4OWItZjYxYWVhMTVjZjBjIiwiZXhwIjoxNDY2MzU1MzQ4LCJpc3MiOiJodHRwczovL2F1dGguZ2xvYnVzLm9yZyIsImlhdCI6MTQ2NjE4MjU0OCwicHJlZmVycmVkX3VzZXJuYW1lIjoiZGthdmFuYWdoQGdtYWlsLmNvbSIsImVtYWlsIjoiZGthdmFuYWdoQGdtYWlsLmNvbSIsIm5hbWUiOiJEYXZpZCBLYXZhbmFnaCJ9.Q8e8L8CQJvHM-WH-u4gB7iFyXzBKVf_2EicmcClFkZUb2K9FK9kAjDnAy5XI6TLYYCOurvPlLLIzbrHNrstwo1bC2rTfGMPjUIkBmJIpq2LWb-ODuBKn0VJxwC2YZo_B8OiT2-ZGykDqpnAhNq3SjWlC8ddpmAT2csFzcMkIPGPmZC57e_uWhAmJRDA73DQknP6rZviaZyEFwRDDsH2DwEa80tQa0H0drDEkvRwVM3t2f10OJIcPN4WwErv3cs0x4E0rKeZawWSiEYF1N1g5B2Fne4kAriA4QTeUVXwNGlGg2z98nXgO5qUTyIn12qDw59dHiBGtN7czlQjUqzuiqA";
        String [] jwtParts = jwt.split("\\.");
        System.err.println("part 0:" + jwtParts[0]);
        System.err.println("part 0:" + new String(Base64.decodeBase64(jwtParts[0])));
        System.err.println("part 1:" + jwtParts[1]);
        System.err.println("part 1:" + new String(Base64.decodeBase64(jwtParts[1])));
        System.err.println("part 2:" + jwtParts[2]);
        System.err.println("part 2:" + new String(new Base64(true).decode(jwtParts[2])));
        JSONObject j_array = JSONObject.fromObject( new String( Base64.decodeBase64(jwtParts[1]) ) );
        System.out.println(j_array);
        System.out.println("url = "+j_array.get("iss"));

        String configJson = readUrl( j_array.get("iss") + "/.well-known/openid-configuration" );
        JSONObject config = JSONObject.fromObject(configJson);
        System.out.println("jwks_uri : "+config.get("jwks_uri") );

        String keysJson = readUrl( (String)config.get("jwks_uri") );
        JSONObject keys = JSONObject.fromObject(keysJson);
        System.out.println("alg : "+((JSONObject)((JSONArray)keys.get("keys")).get(0)).get("alg") );
        String jwks_n = (String)((JSONObject)((JSONArray)keys.get("keys")).get(0)).get("n");
        String jwks_e = (String)((JSONObject)((JSONArray)keys.get("keys")).get(0)).get("e");
        String jwks_alg = (String)((JSONObject)((JSONArray)keys.get("keys")).get(0)).get("alg");
        String thumbprint = DigestUtils.sha1Hex(jwks_n);
        // compare thumbprint w/ provider thumbprints, if 1 matches, proceed
        // extract public key
        BigInteger modulus = new BigInteger( 1, Base64.decodeBase64(jwks_n) );
        BigInteger publicExponent = new BigInteger( 1, Base64.decodeBase64(jwks_e) );
        PublicKey key = KeyFactory.getInstance("RSA").generatePublic(new RSAPublicKeySpec(modulus, publicExponent));
        System.out.println("key = "+key);
        // verify jwt
        byte [] sigBytes = new Base64(true).decode(jwtParts[2]);
        byte [] bytesToSign = (jwtParts[0] + "." + jwtParts[1]).getBytes();
        Signature sig = Signature.getInstance("SHA512withRSA", "BC");
        sig.initVerify(key);
        sig.update(bytesToSign);
        System.out.println("signature verifies : "+sig.verify(sigBytes));

    }
}        
