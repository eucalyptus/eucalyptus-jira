/*************************************************************************
 * Copyright 2009-2013 Eucalyptus Systems, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * Please contact Eucalyptus Systems, Inc., 6755 Hollister Ave., Goleta
 * CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
 * additional information or have any questions.
 ************************************************************************/
package com.eucalyptus.tests.awssdk;

import java.net.URI;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.autoscaling.AmazonAutoScaling;
import com.amazonaws.services.autoscaling.AmazonAutoScalingClient;
import com.amazonaws.services.autoscaling.model.AutoScalingInstanceDetails;
import com.amazonaws.services.autoscaling.model.CreateAutoScalingGroupRequest;
import com.amazonaws.services.autoscaling.model.CreateLaunchConfigurationRequest;
import com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest;
import com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest;
import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesRequest;
import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesResult;
import com.amazonaws.services.ec2.AmazonEC2;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.DescribeAvailabilityZonesResult;
import com.amazonaws.services.ec2.model.DescribeImagesRequest;
import com.amazonaws.services.ec2.model.DescribeImagesResult;
import com.amazonaws.services.ec2.model.DescribeInstancesRequest;
import com.amazonaws.services.ec2.model.DescribeInstancesResult;
import com.amazonaws.services.ec2.model.Filter;
import com.amazonaws.services.ec2.model.Instance;
import com.amazonaws.services.ec2.model.Reservation;
import com.amazonaws.services.ec2.model.TerminateInstancesRequest;

/**
 * This application tests EC2 monitoring of instance health for auto scaling.
 * 
 * This is verification for the story:
 * 
 *   https://eucalyptus.atlassian.net/browse/EUCA-4902
 */
public class TestAutoScalingEc2InstanceHealthMonitoring {

  public static void main( String[] args ) throws Exception {
    final TestAutoScalingEc2InstanceHealthMonitoring test =  new TestAutoScalingEc2InstanceHealthMonitoring();
    test.test();
  }

  private AWSCredentials credentials() {
    return new BasicAWSCredentials(
        "JJBIR30TWMIPPM0AQMVSP",
        "uVCDDvwLDN3OEzz5EqmQeLju5E26YQKsdwJIgnu3"
    );
  }

  private String cloudUri( String servicePath ) {
    return
        URI.create( "http://192.168.51.75:8773/" )
            .resolve( servicePath )
            .toString();
  }

  private AmazonAutoScaling getAutoScalingClient( ) {
    final AmazonAutoScaling as = new AmazonAutoScalingClient( credentials() );
    as.setEndpoint( cloudUri( "/services/AutoScaling/" ) );
    return as;
  }

  private AmazonEC2 getEc2Client( ) {
    final AmazonEC2 ec2 = new AmazonEC2Client( credentials() );
    ec2.setEndpoint( cloudUri( "/services/Eucalyptus/" ) );
    return ec2;
  }

  private String instanceType() {
    return "m1.small";
  }

  private void assertThat( boolean condition,
                           String message ){
    assert condition : message;
  }

  private void print( String text ) {
    System.out.println( text );
  }

  private void test() throws Exception{
    final AmazonAutoScaling as = getAutoScalingClient();
    final AmazonEC2 ec2 = getEc2Client();

    // Find an appropriate image to launch
    final DescribeImagesResult imagesResult = ec2.describeImages( new DescribeImagesRequest().withFilters(
        new Filter().withName( "image-type" ).withValues( "machine" ),
        new Filter().withName( "root-device-type" ).withValues( "instance-store" )
    ) );

    assertThat( imagesResult.getImages().size() > 0, "Image not found" );

    final String imageId = imagesResult.getImages().get( 0 ).getImageId();
    print( "Using image: " + imageId );

    // Find an AZ to use
    final DescribeAvailabilityZonesResult azResult = ec2.describeAvailabilityZones();

    assertThat( azResult.getAvailabilityZones().size() > 0, "Availability zone not found" );

    final String availabilityZone = azResult.getAvailabilityZones().get( 0 ).getZoneName();
    print( "Using availability zone: " + availabilityZone );

    // End discovery, start test
    final String namePrefix = UUID.randomUUID().toString() + "-";
    print( "Using resource prefix for test: " + namePrefix );

    final List<Runnable> cleanupTasks = new ArrayList<Runnable>();
    try {
      // Create launch configuration
      final String configName = namePrefix + "Ec2InstanceHealthMonitoringTest";
      print( "Creating launch configuration: " + configName );
      as.createLaunchConfiguration( new CreateLaunchConfigurationRequest()
          .withLaunchConfigurationName( configName )
          .withImageId( imageId )
          .withInstanceType( instanceType() ) );
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Deleting launch configuration: " + configName );
          as.deleteLaunchConfiguration( new DeleteLaunchConfigurationRequest().withLaunchConfigurationName( configName ) );
        }
      } );

      // Create scaling group    
      final String groupName = namePrefix + "Ec2InstanceHealthMonitoringTest";
      print( "Creating auto scaling group: " + groupName );
      as.createAutoScalingGroup( new CreateAutoScalingGroupRequest()
          .withAutoScalingGroupName( groupName )
          .withLaunchConfigurationName( configName )
          .withDesiredCapacity( 1 )
          .withMinSize( 1 )
          .withMaxSize( 1 )
          .withHealthCheckType( "EC2" )
          .withHealthCheckGracePeriod( 90 ) // 1 1/2 minutes
          .withAvailabilityZones( availabilityZone )
          .withTerminationPolicies( "OldestInstance" ) );
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Deleting group: " + groupName );
          as.deleteAutoScalingGroup( new DeleteAutoScalingGroupRequest().withAutoScalingGroupName( groupName ).withForceDelete( true ) );
        }
      } );
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          final List<String> instanceIds = getInstancesForGroup( ec2, groupName, null );
          print( "Terminating instances: " + instanceIds );
          ec2.terminateInstances( new TerminateInstancesRequest().withInstanceIds( instanceIds ) );
        }
      } );

      // Wait for instances to launch
      print( "Waiting for instance to launch" );
      final long timeout = TimeUnit.MINUTES.toMillis( 2 );
      final String instanceId = waitForInstances( ec2, timeout, 1, groupName ).get( 0 );

      // Verify initial health status
      print( "Verifying initial instance status" );
      verifyInstanceHealthStatus( as, instanceId, "Healthy" );

      // Terminate via EC2
      print( "Terminating instance via EC2 : " + instanceId );
      ec2.terminateInstances( new TerminateInstancesRequest().withInstanceIds( instanceId ) );

      // Verify initial health status
      print( "Waiting for auto scaling instance health to change : " + instanceId );
      waitForHealthStatus( as, instanceId, "Unhealthy" );

      // Delay to allow for health status to be acted on
      print( "Waiting for unhealthy instance replacement : " + instanceId );
      Thread.sleep( TimeUnit.SECONDS.toMillis( 30 ) );

      // Wait for replacement instance
      print( "Waiting for replacement instance to launch" );
      final String replacementInstanceId = waitForInstances( ec2, timeout, 1, groupName ).get( 0 );
      assertThat( !replacementInstanceId.equals( instanceId ), "Instance not replaced" );
      
      print( "Test complete" );
    } finally {
      // Attempt to clean up anything we created
      Collections.reverse( cleanupTasks );
      for ( final Runnable cleanupTask : cleanupTasks ) {
        try {
          cleanupTask.run();
        } catch ( Exception e ) {
          e.printStackTrace();
        }
      }
    }
  }

  private void verifyInstanceHealthStatus( final AmazonAutoScaling as,
                                           final String instanceId,
                                           final String expectedStatus ) {
    final String healthStatus = getHealthStatus( as, instanceId );
    assertThat( expectedStatus.equals( healthStatus ), "Expected " + expectedStatus + " health status"  );
  }

  private void waitForHealthStatus( final AmazonAutoScaling as,
                                    final String instanceId,
                                    final String expectedStatus ) throws Exception {
    final long startTime = System.currentTimeMillis( );
    final long timeout = TimeUnit.MINUTES.toMillis( 1 );
    boolean completed = false;
    while ( !completed && ( System.currentTimeMillis() - startTime ) < timeout ) {
      Thread.sleep( 5000 );
      final String healthStatus = getHealthStatus( as, instanceId );
      completed = expectedStatus.equals( healthStatus );
    }
    assertThat( completed, "Instances health status did not change to " + expectedStatus + " within the expected timeout" );
    print( "Instance health status changed in " + ( System.currentTimeMillis()-startTime ) + "ms" );
  }

  private String getHealthStatus( final AmazonAutoScaling as, 
                                  final String instanceId ) {
    final DescribeAutoScalingInstancesResult instancesResult =
        as.describeAutoScalingInstances( new DescribeAutoScalingInstancesRequest().withInstanceIds( instanceId ) );
    assertThat( instancesResult.getAutoScalingInstances().size()==1, "Auto scaling instance found" );
    final AutoScalingInstanceDetails details = instancesResult.getAutoScalingInstances().get( 0 );
    final String healthStatus = details.getHealthStatus();
    print( "Health status: " + healthStatus );
    return healthStatus;
  }

  private List<String> waitForInstances( final AmazonEC2 ec2,
                                         final long timeout,
                                         final int expectedCount,
                                         final String groupName ) throws Exception {
    final long startTime = System.currentTimeMillis( );
    boolean completed = false;
    List<String> instanceIds = Collections.emptyList();
    while ( !completed && ( System.currentTimeMillis() - startTime ) < timeout ) {
      Thread.sleep( 5000 );
      instanceIds = getInstancesForGroup( ec2, groupName, "running" );
      completed = instanceIds.size() == expectedCount;
    }
    assertThat( completed, "Instances count did not change to " + expectedCount + " within the expected timeout" );
    print( "Instance count changed in " + ( System.currentTimeMillis()-startTime ) + "ms" );
    return instanceIds;
  }

  private List<String> getInstancesForGroup( final AmazonEC2 ec2,
                                             final String groupName,
                                             final String status ) {
    final DescribeInstancesResult instancesResult = ec2.describeInstances( new DescribeInstancesRequest().withFilters(
        new Filter().withName( "tag:aws:autoscaling:groupName" ).withValues( groupName )
    ) );
    final List<String> instanceIds = new ArrayList<String>();
    for ( final Reservation reservation : instancesResult.getReservations() ) {
      for ( final Instance instance : reservation.getInstances() ) {
        if ( status == null || instance.getState()==null || status.equals( instance.getState().getName() ) ) {
          instanceIds.add( instance.getInstanceId() );
        }
      }
    }
    return instanceIds;
  }
}
