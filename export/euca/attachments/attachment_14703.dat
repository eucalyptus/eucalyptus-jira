/*************************************************************************
 * Copyright 2009-2013 Eucalyptus Systems, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * Please contact Eucalyptus Systems, Inc., 6755 Hollister Ave., Goleta
 * CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
 * additional information or have any questions.
 ************************************************************************/
package com.eucalyptus.tests.awssdk;

import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.autoscaling.AmazonAutoScaling;
import com.amazonaws.services.autoscaling.AmazonAutoScalingClient;
import com.amazonaws.services.autoscaling.model.AutoScalingGroup;
import com.amazonaws.services.autoscaling.model.CreateAutoScalingGroupRequest;
import com.amazonaws.services.autoscaling.model.CreateLaunchConfigurationRequest;
import com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest;
import com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest;
import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsRequest;
import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsResult;
import com.amazonaws.services.autoscaling.model.Instance;
import com.amazonaws.services.autoscaling.model.SetDesiredCapacityRequest;
import com.amazonaws.services.autoscaling.model.SetInstanceHealthRequest;
import com.amazonaws.services.autoscaling.model.TerminateInstanceInAutoScalingGroupRequest;
import com.amazonaws.services.ec2.AmazonEC2;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.DescribeAvailabilityZonesResult;
import com.amazonaws.services.ec2.model.DescribeImagesRequest;
import com.amazonaws.services.ec2.model.DescribeImagesResult;
import com.amazonaws.services.ec2.model.Filter;
import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancing;
import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient;
import com.amazonaws.services.elasticloadbalancing.model.CreateLoadBalancerRequest;
import com.amazonaws.services.elasticloadbalancing.model.DeleteLoadBalancerRequest;
import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersRequest;
import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersResult;
import com.amazonaws.services.elasticloadbalancing.model.Listener;
import com.amazonaws.services.elasticloadbalancing.model.LoadBalancerDescription;

/**
 * This application tests add/remove of auto scaling instances to ELB.
 *
 * This is verification for the story:
 *
 *   https://eucalyptus.atlassian.net/browse/EUCA-5007
 */
public class TestAutoScalingELBAddRemoveInstances {
  private final String host;
  private final String accessKey;
  private final String secretKey;

  public static void main( String[] args ) throws Exception {
    final TestAutoScalingELBAddRemoveInstances test =  new TestAutoScalingELBAddRemoveInstances(
        "192.168.51.173",
        "PDWR1SGGWTFGSQ9CAM4V9",
        "XpA6hqzd18FR39BB8ufZ4eD9AJydbjR66702fV77"
    );
    test.test();
  }

  public TestAutoScalingELBAddRemoveInstances( final String host,
                                               final String accessKey,
                                               final String secretKey ) {
    this.host = host;
    this.accessKey = accessKey;
    this.secretKey = secretKey;
  }

  private AWSCredentials credentials() {
    return new BasicAWSCredentials( accessKey, secretKey );
  }

  private String cloudUri( String servicePath ) {
    return
        URI.create( "http://" + host + ":8773/" )
            .resolve( servicePath )
            .toString();
  }

  private AmazonAutoScaling getAutoScalingClient( ) {
    final AmazonAutoScaling as = new AmazonAutoScalingClient( credentials() );
    as.setEndpoint( cloudUri( "/services/AutoScaling/" ) );
    return as;
  }

  private AmazonEC2 getEc2Client( ) {
    final AmazonEC2 ec2 = new AmazonEC2Client( credentials() );
    ec2.setEndpoint( cloudUri( "/services/Eucalyptus/" ) );
    return ec2;
  }

  private AmazonElasticLoadBalancing getElbClient( ) {
    final AmazonElasticLoadBalancing elb = new AmazonElasticLoadBalancingClient( credentials() );
    elb.setEndpoint( cloudUri( "/services/LoadBalancing/" ) );
    return elb;
  }

  private String instanceType() {
    return "m1.small";
  }

  private void assertThat( boolean condition,
                           String message ){
    assert condition : message;
  }

  private void print( String text ) {
    System.out.println( text );
  }

  public void test() throws Exception{
    final AmazonAutoScaling as = getAutoScalingClient();
    final AmazonEC2 ec2 = getEc2Client();
    final AmazonElasticLoadBalancing elb = getElbClient();

    // Find an appropriate image to launch
    final DescribeImagesResult imagesResult = ec2.describeImages( new DescribeImagesRequest().withFilters(
        new Filter().withName( "image-type" ).withValues( "machine" ),
        new Filter().withName( "root-device-type" ).withValues( "instance-store" )
    ) );

    assertThat( imagesResult.getImages().size() > 0, "Image not found" );

    final String imageId = imagesResult.getImages().get( 0 ).getImageId();
    print( "Using image: " + imageId );

    // Find an AZ to use
    final DescribeAvailabilityZonesResult azResult = ec2.describeAvailabilityZones();

    assertThat( azResult.getAvailabilityZones().size() > 0, "Availability zone not found" );

    final String availabilityZone = azResult.getAvailabilityZones().get( 0 ).getZoneName();
    print( "Using availability zone: " + availabilityZone );

    // End discovery, start test
    final String namePrefix = UUID.randomUUID().toString() + "-";
    print( "Using resource prefix for test: " + namePrefix );

    final List<Runnable> cleanupTasks = new ArrayList<Runnable>();
    try {
      // Generate a load balancer to use
      final String loadBalancerName = namePrefix + "ELBAddRemoveTest";
      print( "Creating a load balancer for test use: " + loadBalancerName );
      elb.createLoadBalancer( new CreateLoadBalancerRequest()
          .withLoadBalancerName( loadBalancerName )
          .withAvailabilityZones( availabilityZone )
          .withListeners( new Listener()
              .withInstancePort( 8888 )
              .withLoadBalancerPort( 8888 )
              .withProtocol( "HTTP" )
          )
      );
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Deleting load balancer: " + loadBalancerName );
          elb.deleteLoadBalancer( new DeleteLoadBalancerRequest().withLoadBalancerName( loadBalancerName ) );
        }
      } );

      // Register cleanup for launch config
      final String configName = namePrefix + "ELBAddRemoveTest";
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Deleting launch configuration: " + configName );
          as.deleteLaunchConfiguration( new DeleteLaunchConfigurationRequest().withLaunchConfigurationName( configName ) );
        }
      } );

      // Create launch configuration
      print( "Creating launch configuration: " + configName );
      as.createLaunchConfiguration( new CreateLaunchConfigurationRequest()
          .withLaunchConfigurationName( configName )
          .withImageId( imageId )
          .withInstanceType( instanceType() ) );

      // Register cleanup for auto scaling group
      final String groupName = namePrefix + "ELBAddRemoveTest";
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Deleting group: " + groupName );
          as.deleteAutoScalingGroup( new DeleteAutoScalingGroupRequest().withAutoScalingGroupName( groupName ).withForceDelete( true ) );
        }
      } );

      // Create scaling group
      print( "Creating auto scaling group: " + groupName );
      as.createAutoScalingGroup( new CreateAutoScalingGroupRequest()
          .withAutoScalingGroupName( groupName )
          .withLaunchConfigurationName( configName )
          .withMinSize( 1 )
          .withMaxSize( 1 )
          .withAvailabilityZones( availabilityZone )
          .withLoadBalancerNames( loadBalancerName )
      );

      // Wait for instance to launch
      print( "Waiting for instance to launch" );
      String instanceId = waitForInstance( as, "InService", TimeUnit.MINUTES.toMillis( 2 ), groupName, false );
      print( "Instance launched: " + instanceId );

      // Verify added to load balancer
      print( "Waiting for instance to be added to ELB" );
      waitForElbInstances( elb, loadBalancerName, TimeUnit.MINUTES.toMillis( 1 ), Arrays.asList( instanceId ) );
      print( "Instance added to ELB" );

      // Terminate instance manually
      print( "Manually terminating instance" );
      as.terminateInstanceInAutoScalingGroup( new TerminateInstanceInAutoScalingGroupRequest()
          .withInstanceId( instanceId )
          .withShouldDecrementDesiredCapacity( true ) );

      // Wait for instance to terminate
      print( "Waiting for termination of instance: " + instanceId );
      waitForInstance( as, "Terminated", TimeUnit.MINUTES.toMillis( 2 ), groupName, true );
      print( "Instance terminated: " + instanceId );

      // Verify removed from load balancer
      print( "Waiting for instance to be removed from load balancer" );
      waitForElbInstances( elb, loadBalancerName, TimeUnit.MINUTES.toMillis( 1 ), Collections.<String>emptyList() );

      // Set desired capacity back to one
      print( "Setting desired capacity to 1 for group: " + groupName );
      as.setDesiredCapacity( new SetDesiredCapacityRequest()
          .withAutoScalingGroupName( groupName )
          .withDesiredCapacity( 1 ) );

      // Wait for instance to launch
      print( "Waiting for instance to launch" );
      instanceId = waitForInstance( as, "InService", TimeUnit.MINUTES.toMillis( 2 ), groupName, false );
      print( "Instance launched: " + instanceId );

      // Verify added to load balancer
      print( "Waiting for instance to be added to ELB" );
      waitForElbInstances( elb, loadBalancerName, TimeUnit.MINUTES.toMillis( 1 ), Arrays.asList( instanceId ) );
      print( "Instance added to ELB" );

      // Manually set instance to unhealthy
      print( "Manually setting instance to unhealthy" );
      as.setInstanceHealth( new SetInstanceHealthRequest()
          .withInstanceId( instanceId )
          .withShouldRespectGracePeriod( false )
          .withHealthStatus( "Unhealthy" ) );

      // Verify removed from load balancer
      print( "Waiting for instance to be removed from load balancer" );
      waitForElbInstances( elb, loadBalancerName, TimeUnit.MINUTES.toMillis( 2 ), Collections.<String>emptyList() );

      // Wait for instance to launch
      print( "Waiting for replacement instance to launch" );
      instanceId = waitForInstance( as, "InService", TimeUnit.MINUTES.toMillis( 3 ), groupName, false );
      print( "Instance launched: " + instanceId );

      // Verify added to load balancer
      print( "Waiting for instance to be added to ELB" );
      waitForElbInstances( elb, loadBalancerName, TimeUnit.MINUTES.toMillis( 1 ), Arrays.asList( instanceId ) );
      print( "Instance added to ELB" );

      // Set desired capacity to zero
      print( "Setting desired capacity to 0 for group: " + groupName );
      as.setDesiredCapacity( new SetDesiredCapacityRequest()
          .withAutoScalingGroupName( groupName )
          .withDesiredCapacity( 0 ) );

      // Verify removed from load balancer
      print( "Waiting for instance to be removed from load balancer" );
      waitForElbInstances( elb, loadBalancerName, TimeUnit.MINUTES.toMillis( 2 ), Collections.<String>emptyList() );

      // Wait for instance to terminate
      print( "Waiting for instance to terminate" );
      waitForInstance( as, "Terminated", TimeUnit.MINUTES.toMillis( 2 ), groupName, true );

      print( "Test complete" );
    } finally {
      // Attempt to clean up anything we created
      Collections.reverse( cleanupTasks );
      for ( final Runnable cleanupTask : cleanupTasks ) {
        try {
          cleanupTask.run();
        } catch ( Exception e ) {
          e.printStackTrace();
        }
      }
    }
  }

  private String waitForInstance( final AmazonAutoScaling as,
                                  final String state,
                                  final long timeout,
                                  final String groupName,
                                  final boolean allowEmpty ) throws Exception {
    final long startTime = System.currentTimeMillis( );
    boolean completed = false;
    String instanceState = null;
    String instanceId = null;
    while ( !completed && ( System.currentTimeMillis() - startTime ) < timeout ) {
      final Instance instance = getInstance( as, groupName );
      instanceState = instance == null ? null : instance.getLifecycleState();
      instanceId = instance == null ? null : instance.getInstanceId();
      completed = instanceState == null && allowEmpty || state.equals( instanceState );
      Thread.sleep( 2500 );
    }
    assertThat( completed, "Instance not found with state " + state + " within the expected timeout" );
    print( "Instance found in " + (System.currentTimeMillis() - startTime) + "ms for state: " + state + ( instanceState==null ? " (instance terminated before state detected)" : "" ) );
    return instanceId;
  }

  private Instance getInstance( final AmazonAutoScaling as,
                                final String groupName ) {
    final DescribeAutoScalingGroupsResult groupResult = as.describeAutoScalingGroups( new DescribeAutoScalingGroupsRequest().withAutoScalingGroupNames( groupName ) );
    Instance instance = null;
    for ( final AutoScalingGroup group : groupResult.getAutoScalingGroups() ) {
      assertThat( groupName.equals( group.getAutoScalingGroupName() ), "Unexpected group: " + group.getAutoScalingGroupName() );
      assertThat( group.getInstances().size() < 2, "Unexpected instance count: " + group.getInstances().size() );
      instance = group.getInstances().isEmpty() ? null : group.getInstances().get( 0 );
    }
    return instance;
  }

  private void waitForElbInstances( final AmazonElasticLoadBalancing elb,
                                    final String elbName,
                                    final long timeout,
                                    final List<String> instances ) throws Exception {
    final long startTime = System.currentTimeMillis( );
    boolean completed = false;
    while ( !completed && ( System.currentTimeMillis() - startTime ) < timeout ) {
      final List<String> elbInstances = new ArrayList<String>();
      final DescribeLoadBalancersResult balancersResult = elb.describeLoadBalancers( new DescribeLoadBalancersRequest().withLoadBalancerNames( elbName ) );
      for ( final LoadBalancerDescription description : balancersResult.getLoadBalancerDescriptions() ) {
        for ( final com.amazonaws.services.elasticloadbalancing.model.Instance instance : description.getInstances() ) {
          elbInstances.add( instance.getInstanceId() );
        }
      }
      completed = elbInstances.containsAll( instances ) && instances.containsAll( elbInstances );
      Thread.sleep( 2500 );
    }
    assertThat( completed, "Instance not found for load balancer " + elbName + " within the expected timeout" );
    print( "Instance found in " + (System.currentTimeMillis() - startTime) + "ms for load balancer: " + elbName );
  }

}
