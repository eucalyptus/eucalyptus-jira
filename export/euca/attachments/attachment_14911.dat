/*************************************************************************
 * Copyright 2009-2013 Eucalyptus Systems, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * Please contact Eucalyptus Systems, Inc., 6755 Hollister Ave., Goleta
 * CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
 * additional information or have any questions.
 ************************************************************************/
package com.eucalyptus.tests.awssdk;

import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.autoscaling.AmazonAutoScaling;
import com.amazonaws.services.autoscaling.AmazonAutoScalingClient;
import com.amazonaws.services.autoscaling.model.CreateAutoScalingGroupRequest;
import com.amazonaws.services.autoscaling.model.CreateLaunchConfigurationRequest;
import com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest;
import com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest;
import com.amazonaws.services.autoscaling.model.EnableMetricsCollectionRequest;
import com.amazonaws.services.autoscaling.model.InstanceMonitoring;
import com.amazonaws.services.cloudwatch.AmazonCloudWatch;
import com.amazonaws.services.cloudwatch.AmazonCloudWatchClient;
import com.amazonaws.services.cloudwatch.model.Datapoint;
import com.amazonaws.services.cloudwatch.model.Dimension;
import com.amazonaws.services.cloudwatch.model.GetMetricStatisticsRequest;
import com.amazonaws.services.cloudwatch.model.GetMetricStatisticsResult;
import com.amazonaws.services.ec2.AmazonEC2;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.DescribeAvailabilityZonesResult;
import com.amazonaws.services.ec2.model.DescribeImagesRequest;
import com.amazonaws.services.ec2.model.DescribeImagesResult;
import com.amazonaws.services.ec2.model.Filter;

/**
 * This application tests submitting auto scaling metrics to CloudWatch.
 *
 * This is verification for the story:
 *
 *   https://eucalyptus.atlassian.net/browse/EUCA-5413
 */
public class TestAutoScalingMetricsSubmission {

  private final String host;
  private final String accessKey;
  private final String secretKey;

  public static void main( String[] args ) throws Exception {
    final TestAutoScalingMetricsSubmission test =  new TestAutoScalingMetricsSubmission(
        "192.168.51.195",
        "UDG855P9BD1JKL4LT2OTL",
        "w0MP6WUlqUidzWb2J61Ux9a8lWUAyvt9Zw8NRw0K"
    );
    test.test();
  }

  public TestAutoScalingMetricsSubmission( final String host,
                                           final String accessKey,
                                           final String secretKey ) {
    this.host = host;
    this.accessKey = accessKey;
    this.secretKey = secretKey;
  }

  private AWSCredentials credentials() {
    return new BasicAWSCredentials( accessKey, secretKey );
  }

  private String cloudUri( String servicePath ) {
    return
        URI.create( "http://" + host + ":8773/" )
            .resolve( servicePath )
            .toString();
  }

  private AmazonAutoScaling getAutoScalingClient( ) {
    final AmazonAutoScaling as = new AmazonAutoScalingClient( credentials() );
    as.setEndpoint( cloudUri( "/services/AutoScaling/" ) );
    return as;
  }

  private AmazonEC2 getEc2Client( ) {
    final AmazonEC2 ec2 = new AmazonEC2Client( credentials() );
    ec2.setEndpoint( cloudUri( "/services/Eucalyptus/" ) );
    return ec2;
  }

  private AmazonCloudWatch getCwClient( ) {
    final AmazonCloudWatch cw = new AmazonCloudWatchClient( credentials() );
    cw.setEndpoint( cloudUri( "/services/CloudWatch/" ) );
    return cw;
  }

  private String instanceType() {
    return "t1.micro";
  }

  private void assertThat( boolean condition,
                           String message ){
    assert condition : message;
  }

  private void print( String text ) {
    System.out.println( text );
  }

  public void test() throws Exception{
    final AmazonAutoScaling as = getAutoScalingClient();
    final AmazonEC2 ec2 = getEc2Client();
    final AmazonCloudWatch cw = getCwClient();

    // Find an appropriate image to launch
    final DescribeImagesResult imagesResult = ec2.describeImages( new DescribeImagesRequest().withFilters(
        new Filter().withName( "image-type" ).withValues( "machine" )
    ) );

    assertThat( imagesResult.getImages().size() > 0, "Image not found" );

    final String imageId = imagesResult.getImages().get( 0 ).getImageId();
    print( "Using image: " + imageId );

    // Find an AZ to use
    final DescribeAvailabilityZonesResult azResult = ec2.describeAvailabilityZones();

    assertThat( azResult.getAvailabilityZones().size() > 0, "Availability zone not found" );

    final String availabilityZone = azResult.getAvailabilityZones().get( 0 ).getZoneName();
    print( "Using availability zone: " + availabilityZone );

    // End discovery, start test
    final String namePrefix = UUID.randomUUID().toString() + "-";
    print( "Using resource prefix for test: " + namePrefix );

    final List<Runnable> cleanupTasks = new ArrayList<Runnable>();
    try {
      // Register cleanup for launch config
      final String configName = namePrefix + "SubmitMetrics";
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Deleting launch configuration: " + configName );
          as.deleteLaunchConfiguration( new DeleteLaunchConfigurationRequest().withLaunchConfigurationName( configName ) );
        }
      } );

      // Create launch configuration
      print( "Creating launch configuration: " + configName );
      as.createLaunchConfiguration( new CreateLaunchConfigurationRequest()
          .withLaunchConfigurationName( configName )
          .withImageId( imageId )
          .withInstanceType( instanceType() )
          .withInstanceMonitoring( new InstanceMonitoring().withEnabled( true ) ) );

      // Register cleanup for auto scaling group
      final String groupName = namePrefix + "SubmitMetrics";
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Deleting group: " + groupName );
          as.deleteAutoScalingGroup( new DeleteAutoScalingGroupRequest().withAutoScalingGroupName( groupName ).withForceDelete( true ) );
        }
      } );

      // Create scaling group
      print( "Creating auto scaling group: " + groupName );
      as.createAutoScalingGroup( new CreateAutoScalingGroupRequest()
          .withAutoScalingGroupName( groupName )
          .withLaunchConfigurationName( configName )
          .withMinSize( 0 )
          .withMaxSize( 10 )
          .withHealthCheckGracePeriod( 300 )
          .withAvailabilityZones( availabilityZone )
      );

      // Enable single metric
      print( "Enabling GroupMinSize metric for group: " + groupName );
      as.enableMetricsCollection( new EnableMetricsCollectionRequest()
          .withAutoScalingGroupName( groupName )
          .withMetrics( "GroupMaxSize" )
          .withGranularity( "1Minute" ) );

      // Sleep a minute to ensure metric submitted
      print( "Waiting 2 minutes to allow metric submission" );
      Thread.sleep( 130000 );

      // Check metric available
      print( "Getting metric GroupMaxSize for group: " + groupName );
      {
        final GetMetricStatisticsResult metricsResult = cw.getMetricStatistics( new GetMetricStatisticsRequest()
            .withNamespace( "AWS/AutoScaling" )
            .withDimensions( new Dimension().withName( "AutoScalingGroupName" ).withValue( groupName ) )
            .withStartTime( new Date( System.currentTimeMillis() - TimeUnit.MINUTES.toMillis( 2 ) ) )
            .withEndTime( new Date() )
            .withMetricName( "GroupMaxSize" )
            .withPeriod( 60 )
            .withStatistics( Arrays.asList( "Average", "Sum", "SampleCount", "Maximum", "Minimum" ) )
        );
        print( metricsResult.toString() );
        assertThat( "GroupMaxSize".equals( metricsResult.getLabel() ), "Unexpected label: " + metricsResult.getLabel() );
        assertThat( metricsResult.getDatapoints() != null, "Expected datapoints" );
        assertThat( metricsResult.getDatapoints().size() > 0, "Expected at least one datapoint" );
        for ( final Datapoint datapoint : metricsResult.getDatapoints() ) {
          final int expected =  10;
          assertThat( datapoint.getSampleCount()==1, "Unexpected sample count: " + datapoint.getSampleCount() );
          assertThat( "None".equals( datapoint.getUnit() ), "Unexpected unit: " + datapoint.getUnit() );
          assertThat( datapoint.getAverage()==expected, "Unexpected average: " + datapoint.getAverage() );
          assertThat( datapoint.getSum()==expected, "Unexpected sum: " + datapoint.getSum() );
          assertThat( datapoint.getMinimum()==expected, "Unexpected minimum: " + datapoint.getMinimum() );
          assertThat( datapoint.getMaximum()==expected, "Unexpected maximum: " + datapoint.getMaximum() );
        }
      }

      // Enable single metric
      print( "Enabling all metrics for group: " + groupName );
      as.enableMetricsCollection( new EnableMetricsCollectionRequest()
          .withAutoScalingGroupName( groupName )
          .withGranularity( "1Minute" ) );

      // Sleep a minute to ensure metric submitted
      print( "Waiting 2 minutes to allow metric submission" );
      Thread.sleep( 130000 );

      // Check metric available
      print( "Getting metrics for group: " + groupName );
      for ( final String metric : Arrays.asList( "GroupMinSize", "GroupMaxSize", "GroupDesiredCapacity", "GroupInServiceInstances", "GroupPendingInstances", "GroupTerminatingInstances", "GroupTotalInstances" ) ) {
        final GetMetricStatisticsResult metricsResult = cw.getMetricStatistics( new GetMetricStatisticsRequest()
            .withNamespace( "AWS/AutoScaling" )
            .withDimensions( new Dimension().withName( "AutoScalingGroupName" ).withValue( groupName ) )
            .withStartTime( new Date( System.currentTimeMillis() - TimeUnit.MINUTES.toMillis( 2 ) ) )
            .withEndTime( new Date() )
            .withMetricName( metric )
            .withPeriod( 60 )
            .withStatistics( Arrays.asList( "Average", "Sum", "SampleCount", "Maximum", "Minimum" ) )
        );
        print( metricsResult.toString() );
        assertThat( metric.equals( metricsResult.getLabel() ), "Unexpected label: " + metricsResult.getLabel() );
        assertThat( metricsResult.getDatapoints() != null, "Expected datapoints" );
        assertThat( metricsResult.getDatapoints().size() > 0, "Expected at least one datapoint" );
        for ( final Datapoint datapoint : metricsResult.getDatapoints() ) {
          final int expected =  "GroupMaxSize".equals( metric ) ? 10 : 0;
          assertThat( datapoint.getSampleCount()==1, "Unexpected sample count: " + datapoint.getSampleCount() );
          assertThat( "None".equals( datapoint.getUnit() ), "Unexpected unit: " + datapoint.getUnit() );
          assertThat( datapoint.getAverage()==expected, "Unexpected average: " + datapoint.getAverage() );
          assertThat( datapoint.getSum()==expected, "Unexpected sum: " + datapoint.getSum() );
          assertThat( datapoint.getMinimum()==expected, "Unexpected minimum: " + datapoint.getMinimum() );
          assertThat( datapoint.getMaximum()==expected, "Unexpected maximum: " + datapoint.getMaximum() );
        }
      }

      print( "Test complete" );
    } finally {
      // Attempt to clean up anything we created
      Collections.reverse( cleanupTasks );
      for ( final Runnable cleanupTask : cleanupTasks ) {
        try {
          cleanupTask.run();
        } catch ( Exception e ) {
          e.printStackTrace();
        }
      }
    }
  }
}
