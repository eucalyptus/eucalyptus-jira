{

    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "Cloudformation Template to deploy Docker on Ubuntu instance",

    "Parameters": {
        "ImageId": {
            "Description":"Ubuntu Image id",
            "Type":"String",
            "NoEcho":"False"
        },

        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "m1.medium",
            "AllowedValues": ["t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },

        "KeyName": {
            "Description":"User Key Pair",
            "Type":"String",
            "NoEcho":"False"
        }
    },

    "Resources" : {
        "DockerVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : "10.0.0.0/16",
                "EnableDnsSupport" : "True",
                "EnableDnsHostnames" : "True",
                "InstanceTenancy" : "default",
                "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"}} ]
            }
        },

        "DockerSubnet": {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "DockerVPC" },
                "CidrBlock" : "10.0.0.0/24",
                "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
            }
        },

        "DockerInternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
            }
        },

        "DockerAttachGateway" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "DockerVPC" },
                "InternetGatewayId" : { "Ref" : "DockerInternetGateway" }
            }
        },

        "DockerRouteTable": {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "DockerVPC" },
                "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
            }
        },

        "DockerRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "DockerAttachGateway",
            "Properties" : {
                "RouteTableId" : { "Ref" : "DockerRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "DockerInternetGateway" }
            }
        },

        "DockerSubnetRouteTableAssocaiation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "DockerSubnet" },
                "RouteTableId" : { "Ref" : "DockerRouteTable" }
            }
        },

        "DockerNetworkAcl" : {
            "Type" : "AWS::EC2::NetworkAcl",
            "Properties" : {
                "VpcId" : {"Ref" : "DockerVPC"},
                "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
            }
        },

        "InboundSSHNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : {"Ref" : "DockerNetworkAcl"},
                "RuleNumber" : "101",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : {"From" : "22", "To" : "22"}
            }
        },

        "InboundResponsePortsNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : {"Ref" : "DockerNetworkAcl"},
                "RuleNumber" : "102",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : {"From" : "1024", "To" : "65535"}
            }
        },

        "OutBoundHTTPNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : {"Ref" : "DockerNetworkAcl"},
                "RuleNumber" : "100",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : {"From" : "80", "To" : "80"}
            }
        },

        "OutBoundHTTPSNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : {"Ref" : "DockerNetworkAcl"},
                "RuleNumber" : "101",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : {"From" : "443", "To" : "443"}
            }
        },

        "OutboundResponsePortsNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : {"Ref" : "DockerNetworkAcl"},
                "RuleNumber" : "102",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : {"From" : "1024", "To" : "65535"}
            }
        },

        "SubnetNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "DockerSubnet" },
                "NetworkAclId" : { "Ref" : "DockerNetworkAcl" }
            }
        },

        "DockerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
                "Properties": {
                    "GroupDescription" : "Security Group with Ingress Rule for DockerInstance",
                    "VpcId" : {"Ref" : "DockerVPC"},
                    "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
                    "SecurityGroupIngress" : [
                        {
                            "IpProtocol" : "tcp",
                            "FromPort" : "22",
                            "ToPort" : "22",
                            "CidrIp" : "0.0.0.0/0"
                        }
                    ]
                }
        },

        "DockerIPAddress" : {
            "Type" : "AWS::EC2::EIP",
            "DependsOn" : "DockerAttachGateway",
            "Properties" : {
                "Domain" : "vpc"
            }
        },

        "DockerNetworkInterface" : {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                    "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
                    "SourceDestCheck" : "true",
                    "GroupSet" : [{ "Ref" : "DockerSecurityGroup" }],
                    "SubnetId"  : { "Ref" : "DockerSubnet" }
            }
        },

        "DockerIPNetworkInterfaceAssociation": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": { "Fn::GetAtt" : [ "DockerIPAddress", "AllocationId" ]},
                "NetworkInterfaceId": { "Ref": "DockerNetworkInterface" }
            }
        },

        "DockerInstance": {
            "Type": "AWS::EC2::Instance",
                "Properties": {
                    "ImageId" : { "Ref":"ImageId" },
                    "InstanceType" : { "Ref":"InstanceType" },
                    "UserData" : { "Fn::Base64" : "#include https://get.docker.io" },
                    "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
                    "NetworkInterfaces" : [{
                        "DeviceIndex"  : "0",
                        "NetworkInterfaceId" : { "Ref" : "DockerNetworkInterface" }
                    }],
                    "KeyName" : { "Ref" : "KeyName" }
            }
        }
    },

    "Outputs" : {
        "InstanceId" : {
            "Description" : "InstanceId of the newly created EC2 instance",
            "Value" : { "Ref" : "DockerInstance" }
        },
        "AZ" : {
            "Description" : "Availability Zone of the newly created EC2 instance",
            "Value" : { "Fn::GetAtt" : [ "DockerInstance", "AvailabilityZone" ] }
        },
        "PublicIP" : {
            "Description" : "Public IP address of the newly created EC2 instance",
            "Value" : { "Fn::GetAtt" : [ "DockerInstance", "PublicIp" ] }
        }
    }
}
