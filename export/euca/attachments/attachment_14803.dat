/*************************************************************************
 * Copyright 2009-2013 Eucalyptus Systems, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * Please contact Eucalyptus Systems, Inc., 6755 Hollister Ave., Goleta
 * CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
 * additional information or have any questions.
 ************************************************************************/
package com.eucalyptus.tests.awssdk;

import java.net.URI;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.auth.BasicSessionCredentials;
import com.amazonaws.services.ec2.AmazonEC2;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.DescribeImagesRequest;
import com.amazonaws.services.ec2.model.DescribeImagesResult;
import com.amazonaws.services.ec2.model.Filter;
import com.amazonaws.services.identitymanagement.AmazonIdentityManagement;
import com.amazonaws.services.identitymanagement.AmazonIdentityManagementClient;
import com.amazonaws.services.identitymanagement.model.CreateRoleRequest;
import com.amazonaws.services.identitymanagement.model.CreateRoleResult;
import com.amazonaws.services.identitymanagement.model.DeleteRolePolicyRequest;
import com.amazonaws.services.identitymanagement.model.DeleteRoleRequest;
import com.amazonaws.services.identitymanagement.model.GetRoleRequest;
import com.amazonaws.services.identitymanagement.model.GetRoleResult;
import com.amazonaws.services.identitymanagement.model.GetUserRequest;
import com.amazonaws.services.identitymanagement.model.GetUserResult;
import com.amazonaws.services.identitymanagement.model.NoSuchEntityException;
import com.amazonaws.services.identitymanagement.model.PutRolePolicyRequest;
import com.amazonaws.services.securitytoken.AWSSecurityTokenService;
import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClient;
import com.amazonaws.services.securitytoken.model.AssumeRoleRequest;
import com.amazonaws.services.securitytoken.model.AssumeRoleResult;

/**
 * This application tests assuming an IAM role using STS and consuming EC2 with the role.
 *
 * This is verification for the story:
 *
 *   https://eucalyptus.atlassian.net/browse/EUCA-5250
 *
 * Prerequisites:
 *
 * - This test must be run as a user outside the cloud administrator account.
 */
public class TestSTSAssumeRole {

  private final String host;
  private final String accessKey;
  private final String secretKey;

  public static void main( String[] args ) throws Exception {
    final TestSTSAssumeRole test =  new TestSTSAssumeRole(
        "192.168.51.167",
        "TBHTZAWKTLD0UWGWVLZJJ",
        "WCvOGwvAQVP84K7jd8ghAPCwpHPrtwopbWiXIJmb"
    );
    test.test();
  }

  public TestSTSAssumeRole( final String host,
                            final String accessKey,
                            final String secretKey ) {
    this.host = host;
    this.accessKey = accessKey;
    this.secretKey = secretKey;
  }

  private AWSCredentials credentials() {
    return new BasicAWSCredentials( accessKey, secretKey );
  }

  private String cloudUri( String servicePath ) {
    return
        URI.create( "http://" + host + ":8773/" )
            .resolve( servicePath )
            .toString();
  }

  private AmazonIdentityManagement getIamClient( ) {
    final AmazonIdentityManagement iam = new AmazonIdentityManagementClient( credentials() );
    iam.setEndpoint( cloudUri( "/services/Euare/" ) );
    return iam;
  }

  private AmazonEC2 getEc2ClientUsingRole( final String roleArn,
                                           final String externalId,
                                           final String sessionName ) {
    final AmazonEC2 ec2 = new AmazonEC2Client( new AWSCredentialsProvider(){
      @Override
      public AWSCredentials getCredentials() {
        final AWSSecurityTokenService sts = new AWSSecurityTokenServiceClient( credentials() );
        sts.setEndpoint( cloudUri( "/services/Tokens/" ) );
        final AssumeRoleResult assumeRoleResult = sts.assumeRole( new AssumeRoleRequest()
          .withRoleArn( roleArn )
          .withExternalId( externalId )
          .withRoleSessionName( sessionName )
        );

        assertThat( assumeRoleResult.getAssumedRoleUser().getAssumedRoleId().endsWith( sessionName ), "Unexpected assumed role id: " + assumeRoleResult.getAssumedRoleUser().getAssumedRoleId() );
        assertThat( assumeRoleResult.getAssumedRoleUser().getArn().endsWith( sessionName ), "Unexpected assumed role arn: " + assumeRoleResult.getAssumedRoleUser().getArn() );

        return new BasicSessionCredentials(
            assumeRoleResult.getCredentials().getAccessKeyId(),
            assumeRoleResult.getCredentials().getSecretAccessKey(),
            assumeRoleResult.getCredentials().getSessionToken()
        );
      }

      @Override
      public void refresh() {
      }
    } );
    ec2.setEndpoint( cloudUri( "/services/Eucalyptus/" ) );
    return ec2;
  }

  private AmazonEC2 getEc2Client( ) {
    final AmazonEC2 ec2 = new AmazonEC2Client( credentials() );
    ec2.setEndpoint( cloudUri( "/services/Eucalyptus/" ) );
    return ec2;
  }

  private void assertThat( boolean condition,
                           String message ){
    assert condition : message;
  }

  private void print( String text ) {
    System.out.println( text );
  }

  public void test() throws Exception {
    final AmazonIdentityManagement iam = getIamClient();
    final AmazonEC2 ec2 = getEc2Client();

    // Ensure an image exists for testing permissions
    {
      final DescribeImagesResult imagesResult = ec2.describeImages( new DescribeImagesRequest().withFilters(
          new Filter().withName( "image-type" ).withValues( "machine" ),
          new Filter().withName( "root-device-type" ).withValues( "instance-store" )
      ) );
      assertThat( imagesResult.getImages().size() > 0, "Image not found" );
    }

    final String namePrefix = UUID.randomUUID().toString() + "-";
    print( "Using prefix for test: " + namePrefix );

    final GetUserResult userResult = iam.getUser( new GetUserRequest() );
    assertThat( userResult.getUser() != null, "Expected current user info" );
    assertThat( userResult.getUser().getArn() != null, "Expected current user ARN" );
    final String userArn = userResult.getUser().getArn();
    print( "Got user ARN (will convert account alias to ID if necessary): " + userArn );

    final List<Runnable> cleanupTasks = new ArrayList<Runnable>();
    try {
      // Create role to get a client id
      final String accountId;
      {
        final String roleNameA = namePrefix + "AssumeRoleTestA";
        print( "Creating role to determine account number: " + roleNameA );
        final CreateRoleResult roleResult = iam.createRole( new CreateRoleRequest()
          .withRoleName( roleNameA )
          .withAssumeRolePolicyDocument(
              "{\n" +
                  "    \"Statement\": [ {\n" +
                  "      \"Effect\": \"Allow\",\n" +
                  "      \"Principal\": {\n" +
                  "         \"AWS\": [ \"" + userArn + "\" ]\n" +
                  "      },\n" +
                  "      \"Action\": [ \"sts:AssumeRole\" ],\n" +
                  "      \"Condition\": {" +
                  "         \"StringEquals\": {" +
                  "           \"sts:ExternalId\": \"222222222222\"" +
                  "         }" +
                  "      }" +
                  "    } ]\n" +
                  "}" ) );
        cleanupTasks.add( new Runnable() {
          @Override
          public void run() {
            print( "Deleting role: " + roleNameA );
            iam.deleteRole( new DeleteRoleRequest()
                .withRoleName( roleNameA ) );
          }
        } );
        assertThat( roleResult.getRole() != null, "Expected role" );
        assertThat( roleResult.getRole().getArn() != null, "Expected role ARN" );
        assertThat( roleResult.getRole().getArn().length() > 25, "Expected role ARN length to exceed 25 characters" );
        final String roleArn = roleResult.getRole().getArn();
        accountId = roleArn.substring( 13, 25 );
      }
      final String userCleanedArn = "arn:aws:iam::" + accountId + ":" + userArn.substring( userArn.lastIndexOf(':')+1 );
      print( "Using account id: " + accountId );
      print( "Using user ARN in assume role policy: " + userCleanedArn );

      // Create role
      final String roleName = namePrefix + "AssumeRoleTest";
      print( "Creating role: " + roleName );
      iam.createRole( new CreateRoleRequest()
          .withRoleName( roleName )
          .withPath( "/path" )
          .withAssumeRolePolicyDocument(
              "{\n" +
                  "    \"Statement\": [ {\n" +
                  "      \"Effect\": \"Allow\",\n" +
                  "      \"Principal\": {\n" +
                  "         \"AWS\": [ \"" + userCleanedArn + "\" ]\n" +
                  "      },\n" +
                  "      \"Action\": [ \"sts:AssumeRole\" ],\n" +
                  "      \"Condition\": {" +
                  "         \"StringEquals\": {" +
                  "           \"sts:ExternalId\": \"222222222222\"" +
                  "         }" +
                  "      }" +
                  "    } ]\n" +
                  "}" ) );
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Deleting role: " + roleName );
          iam.deleteRole( new DeleteRoleRequest()
              .withRoleName( roleName ) );
        }
      } );

      // Get role info
      print( "Getting role: " + roleName );
      final GetRoleResult result = iam.getRole( new GetRoleRequest().withRoleName( roleName ) );
      assertThat( result.getRole() != null, "Expected role" );
      assertThat( result.getRole().getArn() != null, "Expected role ARN" );
      final String roleArn = result.getRole().getArn();

      // Describe images using role, no permissions so should see nothing
      print( "Describing images to ensure no permission with role: " + roleName );
      {
        final DescribeImagesResult imagesResult = getImagesUsingRole( roleName, roleArn, "222222222222" );
        assertThat( imagesResult.getImages().size() == 0, "Image found when using role with no permissions" );
      }

      // Add policy to role
      final String policyName = namePrefix + "AssumeRoleTest";
      print( "Adding policy: " + policyName + " to role: " + roleName );
      iam.putRolePolicy( new PutRolePolicyRequest()
          .withRoleName( roleName )
          .withPolicyName( policyName )
          .withPolicyDocument(
              "{\n" +
                  "   \"Statement\":[{\n" +
                  "      \"Effect\":\"Allow\",\n" +
                  "      \"Action\":\"ec2:*\",\n" +
                  "      \"Resource\":\"*\"\n" +
                  "   }]\n" +
                  "}" ) );
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Removing policy: " + policyName + ", from role: " + roleName );
          iam.deleteRolePolicy( new DeleteRolePolicyRequest().withRoleName( roleName ).withPolicyName( policyName ) );
        }
      } );

      // Describe images using role
      {
        final DescribeImagesResult imagesResult = getImagesUsingRole( roleName, roleArn, "222222222222" );
        assertThat( imagesResult.getImages().size() > 0, "Image not found when using role" );
        final String imageId = imagesResult.getImages().get( 0 ).getImageId();
        print( "Found image: " + imageId );
      }

      // Describe images using role with incorrect external id
      print( "Ensuring listing images fails when incorrect external id used with role: " + roleName );
      try {
        getImagesUsingRole( roleName, roleArn, "222222222221" );
        assertThat( false, "Expected error due to incorrect external id when assuming role (test must not be run as cloud admin)" );
      } catch ( AmazonServiceException e ) {
        print( "Received expected exception: " + e );
      }

      print( "Test complete" );
    } finally {
      // Attempt to clean up anything we created
      Collections.reverse( cleanupTasks );
      for ( final Runnable cleanupTask : cleanupTasks ) {
        try {
          cleanupTask.run();
        } catch ( NoSuchEntityException e ) {
          print( "Entity not found during cleanup." );
        } catch ( Exception e ) {
          e.printStackTrace();
        }
      }
    }
  }

  private DescribeImagesResult getImagesUsingRole( final String roleName, final String roleArn, String externalId ) {
    final AmazonEC2 ec2 = getEc2ClientUsingRole( roleArn, externalId, "session-name-here" );

    print( "Searching images using role: " + roleName );
    return ec2.describeImages( new DescribeImagesRequest().withFilters(
        new Filter().withName( "image-type" ).withValues( "machine" ),
        new Filter().withName( "root-device-type" ).withValues( "instance-store" )
    ) );
  }
}
