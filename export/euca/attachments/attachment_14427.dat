/*************************************************************************
 * Copyright 2009-2013 Eucalyptus Systems, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * Please contact Eucalyptus Systems, Inc., 6755 Hollister Ave., Goleta
 * CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
 * additional information or have any questions.
 ************************************************************************/

import java.util.ArrayList;

import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.ec2.AmazonEC2;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.DescribeImagesRequest;
import com.amazonaws.services.ec2.model.DescribeImagesResult;
import com.amazonaws.services.ec2.model.Filter;
import com.amazonaws.services.ec2.model.Instance;
import com.amazonaws.services.ec2.model.InstanceMonitoring;
import com.amazonaws.services.ec2.model.MonitorInstancesRequest;
import com.amazonaws.services.ec2.model.MonitorInstancesResult;
import com.amazonaws.services.ec2.model.Reservation;
import com.amazonaws.services.ec2.model.RunInstancesRequest;
import com.amazonaws.services.ec2.model.TerminateInstancesRequest;

/*
 * Monitor Instance Test case
 * https://eucalyptus.atlassian.net/browse/EUCA-4983
 */

public class MonitorTest {

    static AmazonEC2 ec2;

    private static void setCreds() throws Exception {

	BasicAWSCredentials props = new BasicAWSCredentials(
		"ZY0SVI6CHZWJRF3GEGRFD",
		"jbLNox2vCAukcpVJD8VeBR3BBCli77QaRIhej603");
	ec2 = new AmazonEC2Client(props);
	ec2.setEndpoint("http://192.168.51.168:8773/services/Eucalyptus/");
    }

    public static void main(String[] args) throws Exception {

	setCreds();

	final DescribeImagesResult imagesResult = ec2
		.describeImages(new DescribeImagesRequest().withFilters(
			new Filter().withName("image-type").withValues(
				"machine"),
			new Filter().withName("root-device-type").withValues(
				"instance-store")));

	RunInstancesRequest runInstancesRequest = new RunInstancesRequest()
		.withInstanceType("m1.small")
		.withImageId(imagesResult.getImages().get(0).getImageId())
		.withMinCount(1).withMaxCount(2).withSecurityGroups("default");
	
        ec2.runInstances(runInstancesRequest);
        
	ArrayList<String> instanceIds = new ArrayList<String>(1);

	for (Reservation reservation : ec2.describeInstances()
		.getReservations()) {
	    for (Instance instance : reservation.getInstances()) {
		instanceIds.add(instance.getInstanceId());
	    }
	}

	// Add bogus id for a negative tests
	instanceIds.add("i-XXXXXX");
	
	MonitorInstancesRequest monitorInstance = new MonitorInstancesRequest()
		.withInstanceIds(instanceIds);
	;

	MonitorInstancesResult monResults = ec2
		.monitorInstances(monitorInstance);

	for (InstanceMonitoring res : monResults.getInstanceMonitorings()) {
	    System.out.print("Monitor Instance : " + res.getInstanceId()
		    + " Monitor State : " + res.getMonitoring() + "\n");
	}
	
	/* Add clean up after monitor method is completed
	Thread.sleep(60000);
	TerminateInstancesRequest terminateInstancesRequest = new TerminateInstancesRequest();
	terminateInstancesRequest.setInstanceIds(instanceIds);
	ec2.terminateInstances(terminateInstancesRequest);
	*/
    }

}
