/*************************************************************************
 * Copyright 2009-2013 Eucalyptus Systems, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * Please contact Eucalyptus Systems, Inc., 6755 Hollister Ave., Goleta
 * CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
 * additional information or have any questions.
 ************************************************************************/
package com.eucalyptus.tests.awssdk;

import java.net.URI;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.ec2.AmazonEC2;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.DescribeImagesRequest;
import com.amazonaws.services.ec2.model.DescribeImagesResult;
import com.amazonaws.services.ec2.model.DescribeInstancesRequest;
import com.amazonaws.services.ec2.model.DescribeInstancesResult;
import com.amazonaws.services.ec2.model.Filter;
import com.amazonaws.services.ec2.model.Instance;
import com.amazonaws.services.ec2.model.Reservation;
import com.amazonaws.services.ec2.model.RunInstancesRequest;
import com.amazonaws.services.ec2.model.RunInstancesResult;
import com.amazonaws.services.ec2.model.TerminateInstancesRequest;

/**
 * This application tests RunInstances with a client token.
 *
 * This is verification for the task:
 *
 *   https://eucalyptus.atlassian.net/browse/EUCA-5346
 */
public class TestEC2RunInstancesClientToken {

  private final String host;
  private final String accessKey;
  private final String secretKey;

  public static void main( String[] args ) throws Exception {
    final TestEC2RunInstancesClientToken test =  new TestEC2RunInstancesClientToken(
        "192.168.51.182",
        "WTYGTBQ6BJJIA8EM78RVO",
        "JZ17Z9rndVxt65dyqa51m9b1O5ijkEtVsDLtH8oc"
    );
    test.test();
  }

  public TestEC2RunInstancesClientToken( final String host,
                                         final String accessKey,
                                         final String secretKey ) {
    this.host = host;
    this.accessKey = accessKey;
    this.secretKey = secretKey;
  }

  private AWSCredentials credentials() {
    return new BasicAWSCredentials( accessKey, secretKey );
  }

  private String cloudUri( String servicePath ) {
    return
        URI.create( "http://" + host + ":8773/" )
            .resolve( servicePath )
            .toString();
  }

  private AmazonEC2 getEc2Client( ) {
    final AmazonEC2 ec2 = new AmazonEC2Client( credentials() );
    ec2.setEndpoint( cloudUri( "/services/Eucalyptus/" ) );
    return ec2;
  }

  private void assertThat( boolean condition,
                           String message ){
    assert condition : message;
  }

  private void print( String text ) {
    System.out.println( text );
  }

  public void test() throws Exception {
    final AmazonEC2 ec2 = getEc2Client();

    // Find an appropriate image to launch
    final DescribeImagesResult imagesResult = ec2.describeImages( new DescribeImagesRequest().withFilters(
        new Filter().withName( "image-type" ).withValues( "machine" ),
        new Filter().withName( "root-device-type" ).withValues( "instance-store" )
    ) );

    assertThat( imagesResult.getImages().size() > 0, "Image not found" );

    final String imageId = imagesResult.getImages().get( 0 ).getImageId();
    print( "Using image: " + imageId );

    // End discovery, start test
    final List<Runnable> cleanupTasks = new ArrayList<Runnable>();
    try {
      // Run instance with client token
      final String clientToken = UUID.randomUUID().toString() + "-ClientToken";
      print( "Running instance with client token: " + clientToken );
      final RunInstancesResult runResult =
          ec2.runInstances( new RunInstancesRequest()
              .withImageId( imageId )
              .withClientToken( clientToken )
              .withMinCount(1)
              .withMaxCount(1) );
      final String instanceId = getInstancesIds( runResult.getReservation() ).get(0);
      print( "Launched instance: " + instanceId );
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Terminating instance: " + instanceId );
          ec2.terminateInstances( new TerminateInstancesRequest().withInstanceIds( instanceId ) );
        }
      } );

      // Rerunning instance with client token
      final RunInstancesResult runResult2 =
          ec2.runInstances( new RunInstancesRequest()
              .withImageId( imageId )
              .withClientToken( clientToken )
              .withMinCount(1)
              .withMaxCount(1) );
      final String instanceId2 = getInstancesIds( runResult2.getReservation() ).get(0);
      print( "Launched instance: " + instanceId2 );
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Terminating instance: " + instanceId2 );
          ec2.terminateInstances( new TerminateInstancesRequest().withInstanceIds( instanceId2 ) );
        }
      } );

      assertThat( instanceId2.equals( instanceId ), "Instance identifiers did not match" );

      // Test client token filter
      print( "Describing instances using client token filter" );
      {
        final DescribeInstancesResult describeInstancesResult =
            ec2.describeInstances( new DescribeInstancesRequest().withFilters(
                new Filter().withName( "client-token" ).withValues( clientToken ) ) );
        final List<String> describedInstances = getInstancesIds( describeInstancesResult.getReservations() );
        assertThat( describedInstances.size()==1, "Expected one instance" );
        assertThat( instanceId.equals(describedInstances.get(0)), "Unexpected instance id: " + describedInstances.get(0) );
      }

      // Terminate instance
      print( "Terminating instance: " + instanceId );
      ec2.terminateInstances( new TerminateInstancesRequest().withInstanceIds( instanceId ) );
      waitForInstanceToTerminate( ec2, TimeUnit.MINUTES.toMillis( 2 ), instanceId );

      // Rerun instance with client token
      final RunInstancesResult runResult3 =
          ec2.runInstances( new RunInstancesRequest()
              .withImageId( imageId )
              .withClientToken( clientToken )
              .withMinCount(1)
              .withMaxCount(1) );
      final String instanceId3 = getInstancesIds( runResult3.getReservation() ).get(0);
      print( "Launched instance: " + instanceId3 );
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Terminating instance: " + instanceId3 );
          ec2.terminateInstances( new TerminateInstancesRequest().withInstanceIds( instanceId3 ) );
        }
      } );

      assertThat( instanceId3.equals( instanceId ), "Instance identifiers did not match (after termination)" );

      // Test client token filter after termination
      print( "Describing instances using client token filter (after termination)" );
      {
        final DescribeInstancesResult describeInstancesResult =
            ec2.describeInstances( new DescribeInstancesRequest().withFilters(
                new Filter().withName( "client-token" ).withValues( clientToken ) ) );
        final List<String> describedInstances = getInstancesIds( describeInstancesResult.getReservations() );
        assertThat( describedInstances.size()==1, "Expected one instance" );
        assertThat( instanceId.equals(describedInstances.get(0)), "Unexpected instance id: " + describedInstances.get(0) );
      }

      print( "Test complete" );
    } finally {
      // Attempt to clean up anything we created
      Collections.reverse( cleanupTasks );
      for ( final Runnable cleanupTask : cleanupTasks ) {
        try {
          cleanupTask.run();
        } catch ( Exception e ) {
          e.printStackTrace();
        }
      }
    }
  }

  private List<String> getInstancesIds( final Reservation reservation ) {
    return getInstancesIds( Collections.singletonList( reservation ) );
  }

  private List<String> getInstancesIds( final List<Reservation> reservations ) {
    final List<String> instances = new ArrayList<String>();
    for ( final Reservation reservation : reservations ) {
      for ( final Instance instance : reservation.getInstances() ) {
        instances.add( instance.getInstanceId() );
      }
    }
    return instances;
  }

  private void waitForInstanceToTerminate( final AmazonEC2 ec2,
                                           final long timeout,
                                           final String instanceId ) throws Exception {
    final long startTime = System.currentTimeMillis( );
    boolean completed = false;
    outer:
    while ( ( System.currentTimeMillis() - startTime ) < timeout ) {
      Thread.sleep( 5000 );

      final DescribeInstancesResult instancesResult = ec2.describeInstances( new DescribeInstancesRequest().withInstanceIds(
          instanceId
      ) );
      for ( final Reservation reservation : instancesResult.getReservations() ) {
        for ( final Instance instance : reservation.getInstances() ) {
          if ( "terminated".equals( instance.getState().getName() ) ) {
            completed = true;
            break outer;
          }
        }
      }
    }
    assertThat( completed, "Instance did not terminate within the expected timeout" );
    print( "Instance terminated in " + ( System.currentTimeMillis()-startTime ) + "ms" );
  }
}
