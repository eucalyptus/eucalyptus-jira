/*************************************************************************
 * Copyright 2009-2013 Eucalyptus Systems, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * Please contact Eucalyptus Systems, Inc., 6755 Hollister Ave., Goleta
 * CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
 * additional information or have any questions.
 ************************************************************************/
package com.eucalyptus.tests.awssdk;

import java.net.URI;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.autoscaling.AmazonAutoScaling;
import com.amazonaws.services.autoscaling.AmazonAutoScalingClient;
import com.amazonaws.services.autoscaling.model.AutoScalingGroup;
import com.amazonaws.services.autoscaling.model.CreateAutoScalingGroupRequest;
import com.amazonaws.services.autoscaling.model.CreateLaunchConfigurationRequest;
import com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest;
import com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest;
import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsRequest;
import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsResult;
import com.amazonaws.services.autoscaling.model.Instance;
import com.amazonaws.services.autoscaling.model.ScalingActivityInProgressException;
import com.amazonaws.services.autoscaling.model.SetDesiredCapacityRequest;
import com.amazonaws.services.ec2.AmazonEC2;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.DescribeAvailabilityZonesResult;
import com.amazonaws.services.ec2.model.DescribeImagesRequest;
import com.amazonaws.services.ec2.model.DescribeImagesResult;
import com.amazonaws.services.ec2.model.Filter;

/**
 *
 */
public class TestAutoScalingInstanceLifecycle {
  private final String host;
  private final String accessKey;
  private final String secretKey;

  public static void main( String[] args ) throws Exception {
    final TestAutoScalingInstanceLifecycle test =  new TestAutoScalingInstanceLifecycle(
        "192.168.51.175",
        "YAF6EV0UF9V2GHIMERVLX",
        "QAcGbfwKcf1UjfQQ5amztug1v0R2ZOqoKunJH5Gw"
    );
    test.test();
  }

  public TestAutoScalingInstanceLifecycle( final String host,
                                           final String accessKey,
                                           final String secretKey ) {
    this.host = host;
    this.accessKey = accessKey;
    this.secretKey = secretKey;
  }

  private AWSCredentials credentials() {
    return new BasicAWSCredentials( accessKey, secretKey );
  }

  private String cloudUri( String servicePath ) {
    return
        URI.create( "http://" + host + ":8773/" )
            .resolve( servicePath )
            .toString();
  }

  private AmazonAutoScaling getAutoScalingClient( ) {
    final AmazonAutoScaling as = new AmazonAutoScalingClient( credentials() );
    as.setEndpoint( cloudUri( "/services/AutoScaling/" ) );
    return as;
  }

  private AmazonEC2 getEc2Client( ) {
    final AmazonEC2 ec2 = new AmazonEC2Client( credentials() );
    ec2.setEndpoint( cloudUri( "/services/Eucalyptus/" ) );
    return ec2;
  }

  private String instanceType() {
    return "m1.small";
  }

  private void assertThat( boolean condition,
                           String message ){
    assert condition : message;
  }

  private void print( String text ) {
    System.out.println( text );
  }

  public void test() throws Exception{
    final AmazonAutoScaling as = getAutoScalingClient();
    final AmazonEC2 ec2 = getEc2Client();

    // Find an appropriate image to launch
    final DescribeImagesResult imagesResult = ec2.describeImages( new DescribeImagesRequest().withFilters(
        new Filter().withName( "image-type" ).withValues( "machine" ),
        new Filter().withName( "root-device-type" ).withValues( "instance-store" )
    ) );

    assertThat( imagesResult.getImages().size() > 0, "Image not found" );

    final String imageId = imagesResult.getImages().get( 0 ).getImageId();
    print( "Using image: " + imageId );

    // Find an AZ to use
    final DescribeAvailabilityZonesResult azResult = ec2.describeAvailabilityZones();

    assertThat( azResult.getAvailabilityZones().size() > 0, "Availability zone not found" );

    final String availabilityZone = azResult.getAvailabilityZones().get( 0 ).getZoneName();
    print( "Using availability zone: " + availabilityZone );

    // End discovery, start test
    final String namePrefix = UUID.randomUUID().toString() + "-";
    print( "Using resource prefix for test: " + namePrefix );

    final List<Runnable> cleanupTasks = new ArrayList<Runnable>();
    try {
      // Register cleanup for launch config
      final String configName = namePrefix + "InstanceLifecycleTest";
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Deleting launch configuration: " + configName );
          as.deleteLaunchConfiguration( new DeleteLaunchConfigurationRequest().withLaunchConfigurationName( configName ) );
        }
      } );

      // Create launch configuration
      print( "Creating launch configuration: " + configName );
      as.createLaunchConfiguration( new CreateLaunchConfigurationRequest()
          .withLaunchConfigurationName( configName )
          .withImageId( imageId )
          .withInstanceType( instanceType() ) );

      // Register cleanup for auto scaling group
      final String groupName = namePrefix + "InstanceLifecycleTest";
      cleanupTasks.add( new Runnable() {
        @Override
        public void run() {
          print( "Deleting group: " + groupName );
          as.deleteAutoScalingGroup( new DeleteAutoScalingGroupRequest().withAutoScalingGroupName( groupName ).withForceDelete( true ) );
        }
      } );

      // Create scaling group
      print( "Creating auto scaling group: " + groupName );
      as.createAutoScalingGroup( new CreateAutoScalingGroupRequest()
          .withAutoScalingGroupName( groupName )
          .withLaunchConfigurationName( configName )
          .withMinSize( 0 )
          .withMaxSize( 1 )
          .withDesiredCapacity( 1 )
          .withAvailabilityZones( availabilityZone )
      );

      // Wait for instance to start
      print( "Waiting for Pending instance: " + groupName );
      waitForInstances( as, "Pending", TimeUnit.MINUTES.toMillis( 1 ), groupName, false );

      print( "Waiting for InService instance: " + groupName );
      waitForInstances( as, "InService", TimeUnit.MINUTES.toMillis( 5 ), groupName, false );

      // Terminate instance
      print( "Terminating instance" );
      as.setDesiredCapacity( new SetDesiredCapacityRequest()
          .withAutoScalingGroupName( groupName )
          .withDesiredCapacity( 0 )
      );

      // Wait for instance to terminate
      print( "Waiting for Terminating instance: " + groupName );
      waitForInstances( as, "Terminating", TimeUnit.MINUTES.toMillis( 1 ), groupName, true );

      print( "Test complete" );
    } finally {
      // Attempt to clean up anything we created
      Collections.reverse( cleanupTasks );
      for ( final Runnable cleanupTask : cleanupTasks ) {
        while ( true ) try {
          cleanupTask.run();
          break;
        } catch ( ScalingActivityInProgressException e ) {
          print( "Cleanup failed due to ScalingActivityInProgress, will retry in 5 seconds." );
          Thread.sleep( 5000 );
        } catch ( Exception e ) {
          e.printStackTrace();
          break;
        }
      }
    }
  }

  private void waitForInstances( final AmazonAutoScaling as,
                                 final String state,
                                 final long timeout,
                                 final String groupName,
                                 final boolean allowEmpty ) throws Exception {
    final long startTime = System.currentTimeMillis( );
    boolean completed = false;
    String instanceState = null;
    while ( !completed && ( System.currentTimeMillis() - startTime ) < timeout ) {
      instanceState = getInstanceState( as, groupName );
      completed = instanceState == null && allowEmpty || state.equals( instanceState );
      Thread.sleep( 2500 );
    }
    assertThat( completed, "Instance not found with state " + state + " within the expected timeout" );
    print( "Instance found in " + (System.currentTimeMillis() - startTime) + "ms for state: " + state + ( instanceState==null ? " (instance terminated before state detected)" : "" ) );
  }

  private String getInstanceState( final AmazonAutoScaling as,
                                   final String groupName ) {
    final DescribeAutoScalingGroupsResult groupResult = as.describeAutoScalingGroups( new DescribeAutoScalingGroupsRequest().withAutoScalingGroupNames( groupName ) );
    String state = null;
    for ( final AutoScalingGroup group : groupResult.getAutoScalingGroups() ) {
      assertThat( groupName.equals( group.getAutoScalingGroupName() ), "Unexpected group: " + group.getAutoScalingGroupName() );
      assertThat( group.getInstances().size() < 2, "Unexpected instance count: " + group.getInstances().size() );
      for ( final Instance instance : group.getInstances() ) {
        state = instance.getLifecycleState();
      }
    }
    return state;
  }

}
