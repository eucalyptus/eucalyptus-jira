/*************************************************************************
 * Copyright 2009-2014 Eucalyptus Systems, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * Please contact Eucalyptus Systems, Inc., 6755 Hollister Ave., Goleta
 * CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
 * additional information or have any questions.
 ************************************************************************/
package com.eucalyptus.tests.awssdk

import com.amazonaws.AmazonServiceException
import com.amazonaws.Request
import com.amazonaws.auth.AWSCredentials
import com.amazonaws.auth.AWSCredentialsProvider
import com.amazonaws.auth.BasicAWSCredentials
import com.amazonaws.auth.BasicSessionCredentials
import com.amazonaws.handlers.AbstractRequestHandler
import com.amazonaws.internal.StaticCredentialsProvider
import com.amazonaws.services.ec2.AmazonEC2
import com.amazonaws.services.ec2.AmazonEC2Client
import com.amazonaws.services.ec2.model.CreateSecurityGroupRequest
import com.amazonaws.services.ec2.model.DeleteSecurityGroupRequest
import com.amazonaws.services.ec2.model.SecurityGroup
import com.amazonaws.services.identitymanagement.model.*
import com.amazonaws.services.securitytoken.AWSSecurityTokenService
import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClient
import com.amazonaws.services.securitytoken.model.AssumeRoleRequest
import com.amazonaws.services.securitytoken.model.AssumeRoleResult
import com.github.sjones4.youcan.youare.YouAre
import com.github.sjones4.youcan.youare.YouAreClient
import com.github.sjones4.youcan.youare.model.CreateAccountRequest
import com.github.sjones4.youcan.youare.model.DeleteAccountRequest
import com.github.sjones4.youcan.youtoken.PasswordCredentials
import com.github.sjones4.youcan.youtoken.YouTokenClient
import com.github.sjones4.youcan.youtoken.model.GetAccessTokenRequest
import com.github.sjones4.youcan.youtoken.model.GetAccessTokenResult

/**
 * This application tests assuming a role via an access token and consuming EC2 with the resulting creds
 *
 * To test assuming a role as the console would we test both the admin user
 * and a regular user from an account
 * 
 * https://eucalyptus.atlassian.net/browse/EUCA-11547
 */
class TestSTSAssumeRoleWithAccessToken {

  private final String host = "10.111.X.XXX"

  // Cloud administrative credentials
  private final AWSCredentialsProvider eucalyptusCredentials = new StaticCredentialsProvider( new BasicAWSCredentials(
      "AKI...",
      "..."  ) )

  public static void main( String[] args ) throws Exception {
    new TestSTSAssumeRoleWithAccessToken().test()
  }

  private String cloudUri( String servicePath ) {
    URI.create( "http://${host}:8773/" )
        .resolve( servicePath )
        .toString()
  }

  private AWSCredentialsProvider getAccessTokenCredentialsProvider( final String accountAlias,
                                                                    final String userName,
                                                                    final String password ) {
    new AWSCredentialsProvider( ){
      @Override
      public AWSCredentials getCredentials( ) {
        final YouTokenClient sts = new YouTokenClient( new PasswordCredentials(
            accountAlias,
            userName,
            password.toCharArray()
        ) );
        sts.setEndpoint( cloudUri( "/services/Tokens" ) );
        final GetAccessTokenResult sessionTokenResult = sts.getAccessToken( new GetAccessTokenRequest().withDurationSeconds( 43260 ) );
        return new BasicSessionCredentials(
            sessionTokenResult.getCredentials().getAccessKeyId(),
            sessionTokenResult.getCredentials().getSecretAccessKey(),
            sessionTokenResult.getCredentials().getSessionToken()
        );
      }

      @Override
      public void refresh( ) {
      }
    }
  }

  private AmazonEC2 getEc2ClientUsingRole( final String roleArn,
                                           final String externalId,
                                           final String sessionName,
                                           final AWSCredentialsProvider credentialsProvider ) {
    final AmazonEC2 ec2 = new AmazonEC2Client( new AWSCredentialsProvider(){
      @Override
      public AWSCredentials getCredentials() {
        final AWSSecurityTokenService sts = new AWSSecurityTokenServiceClient( credentialsProvider );
        sts.setEndpoint( cloudUri( "/services/Tokens" ) );
        final AssumeRoleResult assumeRoleResult = sts.assumeRole( new AssumeRoleRequest(
            roleArn: roleArn,
            externalId: externalId,
            roleSessionName: sessionName
        ) )

        assertThat( assumeRoleResult.getAssumedRoleUser().getAssumedRoleId().endsWith( sessionName ), "Unexpected assumed role id: " + assumeRoleResult.getAssumedRoleUser().getAssumedRoleId() );
        assertThat( assumeRoleResult.getAssumedRoleUser().getArn().endsWith( sessionName ), "Unexpected assumed role arn: " + assumeRoleResult.getAssumedRoleUser().getArn() );

        return new BasicSessionCredentials(
            assumeRoleResult.getCredentials().getAccessKeyId(),
            assumeRoleResult.getCredentials().getSecretAccessKey(),
            assumeRoleResult.getCredentials().getSessionToken()
        );
      }

      @Override
      public void refresh() {
      }
    } );
    ec2.setEndpoint( cloudUri( "/services/Eucalyptus" ) );
    return ec2;
  }

  private YouAreClient getYouAreClient( final AWSCredentialsProvider credentials  ) {
    final YouAreClient euare = new YouAreClient( credentials )
    euare.setEndpoint( cloudUri( "/services/Euare" ) )
    euare
  }

  private AmazonEC2 getEc2Client( final AWSCredentialsProvider credentials ) {
    final AmazonEC2 ec2 = new AmazonEC2Client( credentials );
    ec2.setEndpoint( cloudUri( "/services/Eucalyptus" ) );
    return ec2;
  }

  private boolean assertThat( boolean condition,
                              String message ){
    assert condition : message
    true
  }

  private void print( String text ) {
    System.out.println( text )
  }

  public void test( ) throws Exception {
    final String namePrefix = UUID.randomUUID().toString().substring(0,8) + "-"
    print( "Using resource prefix for test: ${namePrefix}" )

    final List<Runnable> cleanupTasks = [] as List<Runnable>
    try {
      final String resourceAccountName = "${namePrefix}resource-account1"
      final String accountName = "${namePrefix}admin-account1"
      String roleArn = null
      AWSCredentialsProvider resourceCredentials = null
      String adminAccountNumber = null
      String adminPassword = "${namePrefix}-P@55w0Rd"
      getYouAreClient( eucalyptusCredentials ).with {
        // Create account with EC2 resources
        print( "Creating resource account: ${resourceAccountName}" )
        String resourceAccountNumber = createAccount( new CreateAccountRequest( accountName: resourceAccountName ) ).with {
          account?.accountId
        }
        assertThat( resourceAccountNumber != null, "Expected account number" )
        print( "Created resource account with number: ${resourceAccountNumber}" )
        cleanupTasks.add {
          print( "Deleting resource account: ${resourceAccountName}" )
          deleteAccount( new DeleteAccountRequest( accountName: resourceAccountName, recursive: true ) )
        }

        // Get credentials for resource account
        print( "Creating access key for resource account: ${resourceAccountName}" )
        YouAre resourceIam = getYouAreClient( eucalyptusCredentials )
        resourceIam.addRequestHandler( new AbstractRequestHandler(){
          public void beforeRequest(final Request<?> request) {
            request.addParameter( "DelegateAccount", resourceAccountName )
          }
        } )
        resourceCredentials = resourceIam.with {
          createAccessKey( new CreateAccessKeyRequest( userName: "admin" ) ).with {
            accessKey?.with {
              new StaticCredentialsProvider( new BasicAWSCredentials( accessKeyId, secretAccessKey ) )
            }
          }
        }
        assertThat( resourceCredentials != null, "Expected resource credentials" )
        print( "Created resource account access key: ${resourceCredentials.credentials.AWSAccessKeyId}" )

        // Create account to use for testing access token / roles
        print( "Creating admin account: ${accountName}" )
        adminAccountNumber = createAccount( new CreateAccountRequest( accountName: accountName ) ).with {
          account?.accountId
        }
        assertThat( adminAccountNumber != null, "Expected account number" )
        print( "Created admin account with number: ${adminAccountNumber}" )
        cleanupTasks.add {
          print( "Deleting admin account: ${accountName}" )
          deleteAccount( new DeleteAccountRequest( accountName: accountName, recursive: true ) )
        }

        // Get credentials for admin account
        print( "Creating login profile for admin of: ${accountName}" )
        YouAre adminIam = getYouAreClient( eucalyptusCredentials )
        adminIam.addRequestHandler( new AbstractRequestHandler(){
          public void beforeRequest(final Request<?> request) {
            request.addParameter( "DelegateAccount", accountName )
          }
        } )
        adminIam.with {
          createLoginProfile( new CreateLoginProfileRequest(
              userName: 'admin',
              password: adminPassword
          ) )
          cleanupTasks.add{
            print( "Deleting login profile for admin of: ${accountName}" )
            deleteLoginProfile( new DeleteLoginProfileRequest( userName: 'admin' ) )
          }
        }
      }

      getYouAreClient( resourceCredentials ).with {
        // Set up role in resource account role
        final String roleName = "${namePrefix}resource-admin"
        print( "Creating role with name: ${roleName}" )
        roleArn = createRole( new CreateRoleRequest(
            roleName: roleName,
            assumeRolePolicyDocument: """\
            {
                "Statement": [ {
                  "Effect": "Allow",
                  "Principal": {
                     "AWS": [ "arn:aws:iam::${adminAccountNumber}:root" ]
                  },
                  "Action": [ "sts:AssumeRole" ]
                } ]
            }
            """.stripIndent() as String
        ) ).with {
          role?.arn
        }
        assertThat( roleArn!=null, "Role ARN expected" )
        print( "Created role with ARN: ${roleArn}" )

        cleanupTasks.add {
          print( "Deleting role: ${roleName}" )
          deleteRole( new DeleteRoleRequest( roleName: roleName ) )
        }

        final String policyName = "ec2-groups"
        print( "Adding policy to role: ${roleName}" )
        putRolePolicy( new PutRolePolicyRequest( roleName: roleName, policyName: policyName, policyDocument: """\
        {
           "Statement": [ {
              "Effect": "Allow",
              "Action": "ec2:*SecurityGroup*",
              "Resource": "*"
           } ]
        }
        """.stripIndent()
        ) )

        cleanupTasks.add {
          print( "Deleting policy for role: ${roleName}/${policyName}" )
          deleteRolePolicy( new DeleteRolePolicyRequest( roleName: roleName, policyName: policyName ) )
        }
      }
      
      // Create client for resources
      String groupName = namePrefix + "Group1"
      getEc2Client( resourceCredentials ).with {
        print( "Creating security group ${groupName}" )
        createSecurityGroup( new CreateSecurityGroupRequest( groupName: groupName, description: groupName ) )

        cleanupTasks.add{
          print( "Deleting security group: ${groupName}" )
          deleteSecurityGroup( new DeleteSecurityGroupRequest( groupName: groupName ) )
        }

        print( "Listing security groups" )
        assertThat( !describeSecurityGroups( )?.securityGroups?.findAll{ SecurityGroup group ->
          group.groupName==groupName }?.isEmpty(),
            "Expected security group: ${groupName}" )
      }


      AWSCredentialsProvider adminCredentialsProvider = 
          getAccessTokenCredentialsProvider( accountName, 'admin', adminPassword )
      
      // Create client using role
      print( 'Listing resources via access token acquired resource role.' )
      getEc2ClientUsingRole( roleArn, "external-id", "session-name", adminCredentialsProvider ).with {
        print( "Listing security groups" )
        assertThat( !describeSecurityGroups( )?.securityGroups?.findAll{ SecurityGroup group ->
          group.groupName==groupName }?.isEmpty(),
            "Expected security group: ${groupName}" )

        void
      }

      print( 'Creating user in admin account to test role use as non-account-admin' )
      String adminAccountUserName = "${namePrefix}user-1"
      String adminAccountUserPassword = "${namePrefix}-P@55w0Rd-2"
      getYouAreClient( adminCredentialsProvider ).with {
        createUser( new CreateUserRequest( path: '/', userName: adminAccountUserName ) )
        cleanupTasks.add{
          print( "Deleting admin account user ${adminAccountUserName}" )
          deleteUser( new DeleteUserRequest( userName: adminAccountUserName ) )
        }

        print( "Creating login profile for admin account user ${adminAccountUserName}" )
        createLoginProfile( new CreateLoginProfileRequest(
            userName: adminAccountUserName,
            password: adminAccountUserPassword
        ) )
        cleanupTasks.add{
          print( "Deleting login profile for admin account user: ${adminAccountUserName}" )
          deleteLoginProfile( new DeleteLoginProfileRequest( userName: adminAccountUserName ) )
        }
        
        print( "Creating policy to allow resource role for admin user ${adminAccountUserName}" )
        putUserPolicy( new PutUserPolicyRequest(
            userName: adminAccountUserName,
            policyName: 'policy-1',
            policyDocument: """\
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": "sts:AssumeRole",
                    "Resource": "${roleArn}"
                  }
                ]
              }
            """.stripIndent( )
        ) )
        cleanupTasks.add{
          print( "Deleting policy for admin account user" )
          deleteUserPolicy( new DeleteUserPolicyRequest(
              userName: adminAccountUserName,
              policyName: 'policy-1'
          ) )
        }
      }
      
      getEc2ClientUsingRole( 
          roleArn, 
          "external-id-2", 
          "session-name-2", 
          getAccessTokenCredentialsProvider( accountName, adminAccountUserName, adminAccountUserPassword ) ).with {
        print( "Listing security groups" )
        assertThat( !describeSecurityGroups( )?.securityGroups?.findAll{ SecurityGroup group ->
          group.groupName==groupName }?.isEmpty(),
            "Expected security group: ${groupName}" )

        print( "Deleting security group: ${groupName}" )
        deleteSecurityGroup( new DeleteSecurityGroupRequest( groupName: groupName ) )

        print( "Listing security groups" )
        assertThat( describeSecurityGroups( )?.securityGroups?.findAll{ SecurityGroup group ->
          group.groupName==groupName }?.isEmpty(),
            "Expected security group deleted: ${groupName}" )

        void
      }      
      
      getEc2Client( resourceCredentials ).with {
        // Verify security group deleted
        print( "Listing security groups" )
        assertThat( describeSecurityGroups( )?.securityGroups?.findAll{ SecurityGroup group ->
          group.groupName==groupName }?.isEmpty(),
            "Expected security group deleted: ${groupName}" )

        void
      }

      print( "Test complete" )
    } finally {
      // Attempt to clean up anything we created
      cleanupTasks.reverseEach { Runnable cleanupTask ->
        try {
          cleanupTask.run()
        } catch ( NoSuchEntityException e ) {
          print( "Entity not found during cleanup." )
        } catch ( AmazonServiceException e ) {
          print( "Service error during cleanup; code: ${e.errorCode}, message: ${e.message}" )
        } catch ( Exception e ) {
          e.printStackTrace()
        }
      }
    }
  }
}
