diff -Naur eucalyptus.orig/node/handlers.c eucalyptus/node/handlers.c
--- eucalyptus.orig/node/handlers.c	2012-07-23 22:34:07.331069752 -0400
+++ eucalyptus/node/handlers.c	2012-07-23 22:52:39.519406942 -0400
@@ -125,11 +125,11 @@
 extern struct handlers kvm_libvirt_handlers;
 extern struct handlers default_libvirt_handlers;
 
-const int staging_cleanup_threshold = 60 * 60 * 2; /* after this many seconds any STAGING domains will be cleaned up */
-const int booting_cleanup_threshold = 60; /* after this many seconds any BOOTING domains will be cleaned up */
-const int bundling_cleanup_threshold = 60 * 60; /* after this many seconds any BUNDLING domains will be cleaned up */
-const int createImage_cleanup_threshold = 60 * 60; /* after this many seconds any CREATEIMAGE domains will be cleaned up */
-const int teardown_state_duration = 180; /* after this many seconds in TEARDOWN state (no resources), we'll forget about the instance */
+const int default_staging_cleanup_threshold = 60 * 60 * 2; /* after this many seconds any STAGING domains will be cleaned up */
+const int default_booting_cleanup_threshold = 60; /* after this many seconds any BOOTING domains will be cleaned up */
+const int default_bundling_cleanup_threshold = 60 * 60 * 2; /* after this many seconds any BUNDLING domains will be cleaned up */
+const int default_createImage_cleanup_threshold = 60 * 60 * 2; /* after this many seconds any CREATEIMAGE domains will be cleaned up */
+const int default_teardown_state_duration = 180; /* after this many seconds in TEARDOWN state (no resources), we'll forget about the instance */
 
 #define MIN_BLOBSTORE_SIZE_MB 10 // even with boot-from-EBS one will need work space for kernel and ramdisk
 #define FS_BUFFER_PERCENT 0.03 // leave 3% extra when deciding on blobstore sizes automatically
@@ -522,7 +522,7 @@
             
             if (instance->state==TEARDOWN) {
                 // it's been long enough, we can forget the instance
-                if ((now - instance->terminationTime)>teardown_state_duration) {
+                if ((now - instance->terminationTime)>nc_state.teardown_state_duration) {
                     remove_instance (&global_instances, instance);
                     logprintfl (EUCAINFO, "[%s] forgetting about instance\n", instance->instanceId);
                     free_instance (&instance);
@@ -533,13 +533,13 @@
 
             // time out logic for STAGING or BOOTING or BUNDLING instances
             if (instance->state==STAGING  
-                && (now - instance->launchTime)   < staging_cleanup_threshold) continue; // hasn't been long enough, spare it
+                && (now - instance->launchTime)   < nc_state.staging_cleanup_threshold) continue; // hasn't been long enough, spare it
             if (instance->state==BOOTING  
-                && (now - instance->bootTime)     < booting_cleanup_threshold) continue;
+                && (now - instance->bootTime)     < nc_state.booting_cleanup_threshold) continue;
             if ((instance->state==BUNDLING_SHUTDOWN || instance->state==BUNDLING_SHUTOFF)
-                && (now - instance->bundlingTime) < bundling_cleanup_threshold) continue;
+                && (now - instance->bundlingTime) < nc_state.bundling_cleanup_threshold) continue;
             if ((instance->state==CREATEIMAGE_SHUTDOWN || instance->state==CREATEIMAGE_SHUTOFF)
-                && (now - instance->createImageTime) < createImage_cleanup_threshold) continue;
+                && (now - instance->createImageTime) < nc_state.createImage_cleanup_threshold) continue;
             
             //DAN: need to destroy the domain here, just in case...
             if (instance->state == BOOTING) {
@@ -1005,6 +1005,11 @@
     int disable_injection; GET_VAR_INT(disable_injection, CONFIG_DISABLE_KEY_INJECTION, 0); 
     nc_state.do_inject_key = !disable_injection;
     strcpy(nc_state.admin_user_id, EUCALYPTUS_ADMIN);
+	GET_VAR_INT(nc_state.staging_cleanup_threshold,     CONFIG_NC_STAGING_CLEANUP_THRESHOLD, default_staging_cleanup_threshold);
+	GET_VAR_INT(nc_state.booting_cleanup_threshold,     CONFIG_NC_BOOTING_CLEANUP_THRESHOLD, default_booting_cleanup_threshold);
+	GET_VAR_INT(nc_state.bundling_cleanup_threshold,    CONFIG_NC_BUNDLING_CLEANUP_THRESHOLD, default_bundling_cleanup_threshold);
+	GET_VAR_INT(nc_state.createImage_cleanup_threshold, CONFIG_NC_CREATEIMAGE_CLEANUP_THRESHOLD, default_createImage_cleanup_threshold);
+	GET_VAR_INT(nc_state.teardown_state_duration,       CONFIG_NC_TEARDOWN_STATE_DURATION, default_teardown_state_duration);
                
     // add three eucalyptus directories with executables to PATH of this process
     add_euca_to_path (nc_state.home); 
diff -Naur eucalyptus.orig/node/handlers.h eucalyptus/node/handlers.h
--- eucalyptus.orig/node/handlers.h	2012-07-23 22:34:07.327069765 -0400
+++ eucalyptus/node/handlers.h	2012-07-23 22:38:48.178149048 -0400
@@ -88,6 +88,11 @@
 	boolean convert_to_disk;
         boolean do_inject_key;
         int concurrent_disk_ops;
+	int staging_cleanup_threshold;
+	int booting_cleanup_threshold;
+	int bundling_cleanup_threshold;
+	int createImage_cleanup_threshold;
+	int teardown_state_duration;
 	// defined max
 	long long config_max_mem;
 	long long config_max_cores;
diff -Naur eucalyptus.orig/util/eucalyptus.h eucalyptus/util/eucalyptus.h
--- eucalyptus.orig/util/eucalyptus.h	2012-07-23 22:34:04.359079472 -0400
+++ eucalyptus/util/eucalyptus.h	2012-07-23 22:46:45.512575795 -0400
@@ -121,6 +121,11 @@
 #define CONFIG_NC_BUNDLE_UPLOAD "NC_BUNDLE_UPLOAD_PATH"
 #define CONFIG_NC_CHECK_BUCKET "NC_CHECK_BUCKET_PATH"
 #define CONFIG_NC_DELETE_BUNDLE "NC_DELETE_BUNDLE_PATH"
+#define CONFIG_NC_STAGING_CLEANUP_THRESHOLD     "NC_STAGING_CLEANUP_THRESHOLD"
+#define CONFIG_NC_BOOTING_CLEANUP_THRESHOLD     "NC_BOOTING_CLEANUP_THRESHOLD"
+#define CONFIG_NC_BUNDLING_CLEANUP_THRESHOLD    "NC_BUNDLING_CLEANUP_THRESHOLD"
+#define CONFIG_NC_CREATEIMAGE_CLEANUP_THRESHOLD "NC_CREATEIMAGE_CLEANUP_THRESHOLD"
+#define CONFIG_NC_TEARDOWN_STATE_DURATION       "NC_TEARDOWN_STATE_DURATION"
 
 /* name of the administrative user within Eucalyptus */
 #define EUCALYPTUS_ADMIN "eucalyptus"
