{
	"AWSTemplateFormatVersion": "2010-09-09",

	"Description": "CloudFormation template to deploy a multiple AZ ELB on Eucalyptus VPC",

	"Resources": {

		"NginxVPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "10.0.0.0/16",
				"EnableDnsSupport": "True",
				"EnableDnsHostnames": "True",
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			}
		},

		"NginxSubnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "NginxVPC"
				},
				"CidrBlock": "10.0.0.0/24",
                                "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			}
		},

		"NginxSubnet2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "NginxVPC"
				},
				"CidrBlock": "10.0.1.0/24",
                                "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			}
		},

		"NginxInternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			}
		},

		"NginxAttachGateway": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "NginxVPC"
				},
				"InternetGatewayId": {
					"Ref": "NginxInternetGateway"
				}
			}
		},

		"NginxRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "NginxVPC"
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			}
		},

		"NginxRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "NginxAttachGateway",
			"Properties": {
				"RouteTableId": {
					"Ref": "NginxRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "NginxInternetGateway"
				}
			}
		},

		"NginxSubnetRouteTableAssocaiation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "NginxSubnet"
				},
				"RouteTableId": {
					"Ref": "NginxRouteTable"
				}
			}
		},

		"NginxSubnetRouteTableAssocaiation2": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "NginxSubnet2"
				},
				"RouteTableId": {
					"Ref": "NginxRouteTable"
				}
			}
		},

		"NginxNetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "NginxVPC"
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			}
		},

		"InboundHTTPNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NginxNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "80",
					"To": "80"
				}
			}
		},

		"InboundSSHNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NginxNetworkAcl"
				},
				"RuleNumber": "101",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "22",
					"To": "22"
				}
			}
		},

		"InboundResponsePortsNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NginxNetworkAcl"
				},
				"RuleNumber": "102",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "1024",
					"To": "65535"
				}
			}
		},

		"OutBoundNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NginxNetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},

		"SubnetNetworkAclAssociation": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "NginxSubnet"
				},
				"NetworkAclId": {
					"Ref": "NginxNetworkAcl"
				}
			}
		},

		"SubnetNetworkAclAssociation2": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "NginxSubnet2"
				},
				"NetworkAclId": {
					"Ref": "NginxNetworkAcl"
				}
			}
		},

		"LoadBalancerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP access on port 80",
				"VpcId": {
					"Ref": "NginxVPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},


		"NginxELB": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"Subnets": [{
					"Ref": "NginxSubnet"
                                },{
					"Ref": "NginxSubnet2"
				}],
				"SecurityGroups": [{
					"Ref": "LoadBalancerSecurityGroup"
				}],
				"Listeners": [{
					"LoadBalancerPort": "80",
					"InstancePort": "80",
					"Protocol": "HTTP"
				}],
				"HealthCheck": {
					"Target": "HTTP:80/",
					"HealthyThreshold": "3",
					"UnhealthyThreshold": "7",
					"Interval": "90",
					"Timeout": "60"
				},
                                "CrossZone": "true",
                                "ConnectionDrainingPolicy": {
                                        "Enabled": "true",
                                        "Timeout": "20"
                                },
                                "ConnectionSettings": {
                                        "IdleTimeout": "30"
                                },
		                "Tags": [{
		 	            "Key": "Application",
				    "Value": {
				        "Ref": "AWS::StackId"
				    }
			        }]
			}
		}
	},

	"Outputs": {
		"ELBURL": {
			"Value": {
				"Fn::Join": ["", ["http://", {
					"Fn::GetAtt": ["NginxELB", "DNSName"]
				}]]
			},
			"Description": "ELB DNS Name"
		}
	}

}
