From 78c89da6f87d6d17fcf2904c5bb0c2d9e08eeb03 Mon Sep 17 00:00:00 2001
From: mmunn1 <mmunn1@eucalyptus.com>
Date: Thu, 12 Jul 2012 15:20:59 -0700
Subject: [PATCH] EUCA-2327 Duplicate address assignments to the same instance

---
 .../com/eucalyptus/address/AddressManager.java     |    8 ++++++--
 1 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/clc/modules/cluster-manager/src/main/java/com/eucalyptus/address/AddressManager.java b/clc/modules/cluster-manager/src/main/java/com/eucalyptus/address/AddressManager.java
index bd31d57..82d2e99 100644
--- a/clc/modules/cluster-manager/src/main/java/com/eucalyptus/address/AddressManager.java
+++ b/clc/modules/cluster-manager/src/main/java/com/eucalyptus/address/AddressManager.java
@@ -168,9 +168,9 @@ public class AddressManager {
     reply.set_return( false );
     final Address address = RestrictedTypes.doPrivileged( request.getPublicIp( ), Address.class );
     if ( !address.isAllocated( ) ) {
-      throw new EucalyptusCloudException( "Cannot associated an address which is not allocated: " + request.getPublicIp( ) );
+      throw new EucalyptusCloudException( "Cannot associate an address which is not allocated: " + request.getPublicIp( ) );
     } else if ( !Contexts.lookup( ).hasAdministrativePrivileges( ) && !Contexts.lookup( ).getUserFullName( ).asAccountFullName( ).getAccountNumber( ).equals( address.getOwner( ).getAccountNumber( ) ) ) {
-      throw new EucalyptusCloudException( "Cannot associated an address which is not allocated to your account: " + request.getPublicIp( ) );
+      throw new EucalyptusCloudException( "Cannot associate an address which is not allocated to your account: " + request.getPublicIp( ) );
     }
     final VmInstance vm = RestrictedTypes.doPrivileged( request.getInstanceId( ), VmInstance.class );
     final VmInstance oldVm = findCurrentAssignedVm( address );
@@ -180,6 +180,10 @@ public class AddressManager {
       : false;
     reply.set_return( true );
     
+    if ( oldAddr != null && address.equals( oldAddr ) ) {
+      return reply;
+    }
+    
     final UnconditionalCallback assignTarget = new UnconditionalCallback( ) {
       public void fire( ) {
         AsyncRequests.newRequest( address.assign( vm ).getCallback( ) ).then( new Callback.Success<BaseMessage>( ) {
-- 
1.7.7.6

